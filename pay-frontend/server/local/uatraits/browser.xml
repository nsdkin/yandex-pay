<?xml version="1.0"?>
<!DOCTYPE rules [
<!ENTITY ver1d "[0-9]+">
<!ENTITY ver2d "[0-9]+(?:[\.][0-9]+)?">
<!ENTITY ver3d "[0-9]+(?:[\.][0-9]+){0,2}">
<!ENTITY ver4d "[0-9]+(?:[\.][0-9]+){0,3}">
<!ENTITY ver "[0-9][0-9\.]*">
<!ENTITY word "a-z0-9_">
<!ENTITY num "0-9">
<!ENTITY s " ">
<!ENTITY seps "[ \-/_]">
<!ENTITY model "[a-zA-Z0-9/\_\-\.\+'&quot; ][a-zA-Z0-9/\_\-\.\+'&quot;\(\)\\, ]*">
<!ENTITY b "[\(\) _]">
<!ENTITY notmodels "(?:Release\/&ver;|Build\/(?:(?:OP[RM]|PPR)?&ver;|[a-z0-9_\.]+)|en\-us|x96|x86|x86_64|device info|mobile|zh\-cn|ru_ru|Build|Network|tablet|arm|arm_64|Microsoft|nokia|wv|Lenovo| |en|ru|Android SDK built for x86|dandelion|Unspecified Device)">
<!ENTITY build "(?:(?: Build|/|;|\)| \().*)?$">
<!ENTITY androids "(?:Marshmallow|Nougat|Oreo|Pie|Lollipop|KitKat|Jelly Bean|Ice Cream Sandwich|Honeycomb|Gingerbread|Froyo|Eclair|Donut|Cupcake|Bender|Astro)">
]>

<!--1.1.71-3 version-->
<!--Нельзя использовать спец регекспы: \b-->
<!--В скобках не должно быть символов начала и конца строки ^$-->
<!--Не использовать избыточные {1}-->

<rules xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="browser.xsd" minver="1.1" date="2013.08.01.10.00">
	<branch name="Mobile">
		<match type="any">
			<pattern type="string">Android</pattern>
			<pattern type="string">iPhone</pattern>
			<pattern type="string">Bada/</pattern>
			<pattern type="string">iPad</pattern>
			<pattern type="string">iPod</pattern>
			<pattern type="string">Mobile Safari</pattern>
			<pattern type="string">MobileSafari</pattern>
			<pattern type="string">Opera Mob</pattern>
			<pattern type="string">Opera Tab</pattern>
			<pattern type="string">Opera Mini</pattern>
			<pattern type="string">OPiOS</pattern>
			<pattern type="string">CLDC-</pattern>
			<pattern type="string">MIDP-</pattern>
			<pattern type="string">Series 60</pattern>
			<pattern type="string">Symbian</pattern>
			<pattern type="string">Windows Phone</pattern>
			<pattern type="string">ZuneWP7</pattern>
			<pattern type="string">Skyfire</pattern>
			<pattern type="string">Windows CE</pattern>
			<pattern type="string">Maemo</pattern>
			<pattern type="string"> Tizen</pattern>
			<pattern type="string">Moblin</pattern>
			<pattern type="string">Fennec</pattern>
			<pattern type="string">UCWEB</pattern>
			<pattern type="string">UC Browser</pattern>
			<pattern type="string">UP.Browser</pattern>
			<pattern type="string">NetFront</pattern>
			<pattern type="string">Obigo</pattern>
			<pattern type="string">hpwOS</pattern>
			<pattern type="string">webOS</pattern>
			<pattern type="string">web0S</pattern>
			<pattern type="string">BREW</pattern>
			<pattern type="string">OpenWave</pattern>
			<pattern type="string">WAP</pattern>
			<pattern type="string">Nokia</pattern>
			<pattern type="string">DoCoMo</pattern>
			<pattern type="string">Kindle</pattern>
			<pattern type="string">Minimo</pattern>
			<pattern type="string">PlayStation Portable</pattern>
			<pattern type="string">Tablet browser</pattern>
			<pattern type="string">BlackBerry</pattern>
			<pattern type="string">PlayBook</pattern>
			<pattern type="string">PalmSource</pattern>
			<pattern type="string">MQQBrowser</pattern>
			<pattern type="string">iTunes-i</pattern>
			<pattern type="string">MAUI</pattern>
			<pattern type="string">Novarra-Vision</pattern>
			<pattern type="string">Puffin/</pattern>
			<pattern type="string">Ubuntu; Mobile</pattern>
			<pattern type="string">Ubuntu; Touch</pattern>
			<pattern type="string">TolokaApp/</pattern>
			<pattern type="regex"> iOS[ /]</pattern>
            <pattern type="regex">Windows NT.*ARM;</pattern>
			<pattern type="regex">\(Mobile;.*Gecko/</pattern>
			<pattern type="regex">MSIE.*PPC[;)]</pattern>
			<pattern type="regex">HTC[_/]</pattern>
			<pattern type="regex">^SAMSUNG</pattern>
			<pattern type="regex">^HUAWEI</pattern>
			<pattern type="regex">^Fly</pattern>
			<pattern type="regex">^SonyEricsson</pattern>
			<pattern type="regex">^Alcatel</pattern>
			<pattern type="regex">^[&word;]+ Opera/</pattern>
			<pattern type="regex">YaBrowser/&ver;&s;YaApp_iOS/&ver;</pattern>
			<pattern type="regex">CFNetwork/&ver;.*Darwin/&ver;</pattern>
			<pattern type="regex">com\.yandex\.mobile\.[a-z\.]+/&ver3d;</pattern>
		</match>
		<define name="isMobile" value="true"/>
		<define name="isMobile">
			<pattern type="regex" value="false">CFNetwork/(?:1\.1|1\.2\.1|1\.2\.2|1\.2\.6|128|128\.2|129\.5|129\.9|129\.10|129\.13|129\.16|129\.18|129\.20|129\.21|129\.22|217|220|221\.5|330|330\.4|339\.5|422\.11|438\.12|438\.14|454\.4|454\.5|454\.9\.4|454\.9\.7|454\.11\.5|454\.11\.12|454\.12\.4|520\.0\.13|520\.2\.5|520\.3\.2|520\.4\.3|520\.5\.1|596\.1|596\.2\.3|596\.3\.3|596\.4\.3|596\.5|673\.0\.3||673\.2\.1||673\.4|720\.0\.9|720\.1\.1|720\.2\.4|720\.3\.13|720\.4\.4|720\.5\.7|760\.0\.5|760\.1\.2|760\.2\.6|760\.4\.2|760\.5|760\.5\.1|760\.6\.3)</pattern>
		</define>
		<define name="isBrowser" value="true"/>
		<define name="isBrowser">
			<pattern type="regex" value="false">com\.yandex\.mobile.[a-z\.]+/&ver3d;</pattern>
		</define>

		<branch name="UCBrowser">
			<match type="any">
				<pattern type="string">UC Browser</pattern>
				<pattern type="string">UCWEB</pattern>
			</match>
			<define name="BrowserEngine" value="UCBrowser"/>
			<define name="BrowserName" value="UCBrowser"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">UCBrowser/(&ver;)</pattern>
				<pattern type="regex" value="$1">UC Browser/(&ver;)</pattern>
			</define>
		</branch>

		<branch name="YandexSearchShort">
			<match type="any">
				<pattern type="regex">^YaBrowser/&ver;&s;YaApp_iOS/&ver;$</pattern>
				<pattern type="regex">YandexSearch/&ver;&s;\(Android &ver;\)</pattern>
				<pattern type="regex">Yandex&s;Search&s;Plugin&s;Android/&ver;</pattern>
			</match>
			<define name="BrowserName" value="YandexSearch"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">_iOS/(&ver;)</pattern>
			</define>

			<define name="inAppBrowser" value="true"/>

			<define name="isTurboApp">
				<pattern type="regex" value="true"> TA/[0-9]+\.[0-9]+</pattern>
			</define>
			<define name="TurboAppPlatformVersion">
				<pattern type="regex" value="$1"> TA/(&ver;)</pattern>
			</define>

			<define name="isSuperApp">
				<pattern type="regex" value="true"> SA/[0-9]+\.[0-9]+</pattern>
			</define>
			<define name="SuperAppVersion">
					<pattern type="regex" value="$1"> SA/(&ver;)</pattern>
			</define>
			<define name="YaBuildName">
					<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
			</define>

			<branch name="YandexSearch_iOS">
				<match type="any">
					<pattern type="string">YaApp_iOS/</pattern>
				</match>
				<define name="BrowserBase" value="Safari"/>
				<define name="BrowserBaseVersion">
					<pattern type="regex" value="$1">WebKit/?(&ver;)</pattern>
				</define>
			</branch>

		</branch>

		<branch name="YandexBrowserShort">
			<match type="any">
				<pattern type="regex">com.yandex.browser(?:\.[a-z]+)?/</pattern>
			</match>
			<define name="BrowserName" value="YandexBrowser"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">com.yandex.browser(?:\.[a-z]+)?/(&ver;)</pattern>
			</define>

			<define name="isTurboApp">
				<pattern type="regex" value="true"> TA/[0-9]+\.[0-9]+</pattern>
			</define>
			<define name="TurboAppPlatformVersion">
				<pattern type="regex" value="$1"> TA/(&ver;)</pattern>
			</define>

			<define name="isSuperApp">
				<pattern type="regex" value="true"> SA/[0-9]+\.[0-9]+</pattern>
			</define>
			<define name="SuperAppVersion">
				<pattern type="regex" value="$1"> SA/(&ver;)</pattern>
			</define>
			<define name="YaBuildName">
				<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
			</define>
		</branch>

		<branch name="TolokaApp">
			<match type="any">
				<pattern type="string">TolokaApp/</pattern>
			</match>
			<define name="BrowserName" value="TolokaApp"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">TolokaApp/(&ver;)</pattern>
			</define>
		</branch>

		<branch name="Edge">
			<match type="any">
				<pattern type="string">Edge/</pattern>
			</match>
			<define name="BrowserEngine" value="Edge"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Edge/(&ver;)</pattern>
			</define>
			<define name="BrowserName" value="Edge"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">Edge/(&ver;)</pattern>
			</define>
		</branch>

		<branch name="InternetExplorer">
			<match>
				<pattern type="string">IEMobile</pattern>
				<pattern type="string">IE Mobile</pattern>
				<pattern type="string">ARM; Trident</pattern>
				<pattern type="regex">MSIE &ver2d;; Windows CE</pattern>
				<pattern type="regex">MSIE &ver2d;.*Windows Phone</pattern>
				<pattern type="regex">MSIE &ver2d;.*PPC</pattern>
				<pattern type="regex">MSIE &ver2d;.*WP[78]</pattern>
				<pattern type="regex">MSIE &ver2d;.*NOKIA</pattern>
				<pattern type="regex">MSIE 1[01].*ARM;</pattern>
			</match>
			<define name="BrowserEngine" value="Trident"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Trident/(&ver2d;)</pattern>
				<pattern type="regex" value="$1">MSIE (&ver2d;)</pattern>
			</define>
			<branch name="MSIETablet">
				<match type="any">
					<pattern type="regex">MSIE.*Windows NT.*ARM;</pattern>
					<pattern type="regex">Windows NT &ver;; ARM; Trident</pattern>
				</match>
				<define name="BrowserName" value="MSIE"/>
				<define name="isTablet" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MSIE (&ver2d;)</pattern>
					<pattern type="regex" value="$1">rv[: ](&ver2d;)</pattern>
				</define>
			</branch>
			<branch name="MSIE">
				<match type="any">
					<pattern type="string">IEMobile</pattern>
					<pattern type="string">IE Mobile</pattern>
					<pattern type="string">MSIE</pattern>
				</match>
				<define name="BrowserName" value="IEMobile"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MSIEMobile[&s;/](&ver2d;)</pattern>
					<pattern type="regex" value="$1">IE&s;?Mobile[&s;/](&ver2d;)</pattern>
					<pattern type="regex" value="$1">MSIE&s;(&ver2d;)</pattern>
				</define>
			</branch>
		</branch>

		<branch name="WebkitFamily">
			<match>
				<pattern type="string">WebKit</pattern>
				<pattern type="string">Mobile Safari/</pattern>
				<pattern type="regex">^Dolphin(?: HD)? &ver;.*iPhone</pattern>
				<pattern type="regex">^Mercury &ver;.*iPhone</pattern>
			</match>
			<define name="BrowserEngine" value="WebKit"/>
			<!--Blink ломает практически все-->
			<!--<define name="BrowserEngine">
				<pattern type="regex" value="Blink">Chrome/(?:28|29|[3-9][0-9])</pattern>
			</define>-->
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">WebKit/?(&ver;)</pattern>
			</define>
			<define name="BrowserBase">
				<pattern type="string" value="Chromium">Chromium/</pattern>
				<pattern type="string" value="Chromium">Chrome/</pattern>
				<pattern type="string" value="Safari">Safari/</pattern>
			</define>
			<define name="BrowserBaseVersion">
				<pattern type="regex" value="$1">Chromium/(&ver;)</pattern>
				<pattern type="regex" value="$1">Chrome/(&ver;)</pattern>
				<pattern type="regex" value="$1">Safari/(&ver;)</pattern>
			</define>

			<define name="inAppBrowser">
				<pattern type="string" value="true">FB_IAB</pattern>
				<pattern type="string" value="true">FBAV</pattern>
				<pattern type="string" value="true">OKApp</pattern>
				<pattern type="regex" value="true">CFNetwork/&ver;.*Darwin/&ver;</pattern>
			</define>

			<branch name="OperaMobile">
				<match type="any">
					<pattern type="string">OPR/</pattern>
					<pattern type="string">OPiOS/</pattern>
				</match>
				<define name="BrowserName">
					<!--OperaMini works on webview and has a very similar ua string -->
					<pattern type="regex" value="OperaMini">; wv\).*Chrome/&ver;&s;Mobile</pattern>
					<pattern type="string" value="OperaMobile">OPR/</pattern>
					<pattern type="string" value="OperaMini">OPiOS/</pattern>
				</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">OPR/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">OPiOS/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="Coast">
				<match type="any">
					<pattern type="string">Coast/</pattern>
				</match>
				<define name="BrowserName">Coast</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Coast/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="Puffin">
				<match>
					<pattern type="string">Puffin/</pattern>
				</match>
				<define name="BrowserName">Puffin</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Puffin/(&ver;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="regex" value="true">Puffin/&ver;[IAW]T</pattern>
				</define>
			</branch>

			<branch name="CocCoc">
				<match type="any">
					<pattern type="string">coc_coc_browser/</pattern>
				</match>
				<define name="BrowserName" value="CocCoc"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">coc_coc_browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="TansoDL">
				<match type="any">
					<pattern type="string">/TansoDL</pattern>
				</match>
				<define name="BrowserName" value="TansoDownloader"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Chrome/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Dolfin">
				<match type="any">
					<pattern type="string">Dolfin/</pattern>
				</match>
				<define name="BrowserName" value="Dolfin"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Dolfin/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="CM">
				<match type="any">
					<pattern type="string">ACHEETAHI/</pattern>
				</match>
				<define name="BrowserName" value="CM Browser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1.$2.$3">ACHEETAHI/[&num;]+([&num;])([&num;]{2})([&num;]{2})$</pattern>
				</define>
			</branch>

			<branch name="Maxthon">
				<match type="any">
					<pattern type="string">MxBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Maxthon"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MxBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Baidu">
				<match type="any">
					<pattern type="string">bdbrowser_i18n/</pattern>
					<pattern type="string">bdbrowser/</pattern>
				</match>
				<define name="BrowserName" value="Baidu"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">bdbrowser/(&ver;)</pattern>
					<pattern type="regex" value="$1">bdbrowser_i18n/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Amigo">
				<match type="any">
					<pattern type="string">AMIGOAPP</pattern>
				</match>
				<define name="BrowserName" value="Amigo"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">APP_VERSION_(&ver;)</pattern>
				</define>
			</branch>

			<branch name="SamsungBrowser">
				<match type="any">
					<pattern type="string">SamsungBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Samsung Internet"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">SamsungBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Tizen">
				<match type="any">
					<pattern type="string"> Tizen</pattern>
				</match>
				<define name="BrowserName" value="Tizen"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver;)</pattern>
					<pattern type="regex" value="$1">Tizen Browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Dolphin">
				<match type="any">
					<pattern type="regex">^Dolphin</pattern>
				</match>
				<define name="BrowserName" value="Dolphin"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">^Dolphin HD (&ver;).*iPhone</pattern>
					<pattern type="regex" value="$1">^Dolphin (&ver;).*iPhone</pattern>
				</define>
			</branch>

			<branch name="UCBrowser">
				<match type="any">
					<pattern type="regex">UCBrowser/&ver;</pattern>
				</match>
				<define name="BrowserName" value="UCBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">UCBrowser/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Mercury">
				<match type="any">
					<pattern type="regex">^Mercury</pattern>
				</match>
				<define name="BrowserName" value="Mercury"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">^Mercury (&ver;)</pattern>
				</define>
			</branch>

			<branch name="BlackBerry">
				<match type="any">
					<pattern type="string">PlayBook</pattern>
					<pattern type="string">BlackBerry</pattern>
					<pattern type="regex">BB[&num;]+; (?:Touch|Kbd)</pattern>
				</match>
				<define name="BrowserName" value="BlackBerry"/>
				<define name="isTablet">
					<pattern type="string" value="true">PlayBook</pattern>
				</define>
				<define name="PreferMobile">
					<pattern type="regex" value="false">Version/&ver; Safari/&ver;</pattern>
					<pattern type="regex" value="true">Version/&ver; Mobile Safari/&ver;</pattern>
				</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="YandexLauncher">
				<match type="any">
					<pattern type="string">YaLauncher/</pattern>
				</match>
				<define name="BrowserName" value="YandexLauncher"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">YaLauncher/(&ver;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">/apad</pattern>
				</define>
				<define name="inAppBrowser" value="true"/>
			</branch>

			<branch name="YandexSearch">
				<match type="any">
					<pattern type="string">YandexSearch/</pattern>
					<pattern type="string">YaApp</pattern>
					<pattern type="regex">YaBrowser/&ver;&s;YaApp_iOS/&ver;</pattern>
				</match>
				<define name="BrowserName" value="YandexSearch"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">YandexSearch/(&ver;)</pattern>
					<pattern type="regex" value="$1">_iOS/(&ver;)</pattern>
					<pattern type="regex" value="$1">_Android/(&ver;)</pattern>
				</define>

				<define name="isTablet">
					<pattern type="string" value="true">/apad</pattern>
				</define>
				<define name="inAppBrowser" value="true"/>
				<define name="BrowserBase">
					<pattern type="string" value="YandexBrowser">BroPP/</pattern>
				</define>

				<define name="isTurboApp">
					<pattern type="regex" value="true"> TA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="TurboAppPlatformVersion">
					<pattern type="regex" value="$1"> TA/(&ver;)</pattern>
				</define>

				<define name="isSuperApp">
					<pattern type="regex" value="true"> SA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="SuperAppVersion">
					<pattern type="regex" value="$1"> SA/(&ver;)</pattern>
				</define>

				<define name="YaBuildName">
					<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
				</define>

				<branch name="YandexSearch_iOS">
					<match type="any">
						<pattern type="string">YaApp_iOS/</pattern>
					</match>
					<define name="BrowserBase" value="Safari"/>
					<define name="BrowserBaseVersion">
						<pattern type="regex" value="$1">WebKit/?(&ver;)</pattern>
					</define>
				</branch>
			</branch>

			<branch name="GoogleSearch">
				<match type="any">
					<pattern type="string">GSA/</pattern>
				</match>
				<define name="BrowserName" value="GoogleSearch"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">GSA/(&ver;)</pattern>
				</define>
				<define name="inAppBrowser" value="true"/>
			</branch>

            <branch name="YandexBrowser">
				<match type="any">
					<pattern type="string">YaMobile/</pattern>
					<pattern type="string">YaBrowser/</pattern>
				</match>
				<define name="BrowserName" value="YandexBrowser"/>
				<define name="BrowserName">
					<pattern type="regex" value="YandexBrowserLite">YaBrowser/(?:&ver;) \(lite\)</pattern>
				</define>
				<define name="inAppBrowser">
					<pattern type="regex" value="true">YaBrowser/(?:&ver;) \(lite\)</pattern>
				</define>
				<define name="isTouch" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">YaBrowser/(&ver;)</pattern>
					<pattern type="regex" value="$1">YaMobile/(&ver;)</pattern>
				</define>
				<define name="YaBuildName">
					<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
				</define>
				<define name="YaITPExpVersion">
					<pattern type="regex" value="$1">Yptp/1\.([0-9][0-9])</pattern>
				</define>

				<define name="YaBuildName">
					<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
				</define>

				<define name="isTurboApp">
				<pattern type="regex" value="true"> TA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="TurboAppPlatformVersion">
					<pattern type="regex" value="$1"> TA/(&ver;)</pattern>
				</define>

				<define name="isSuperApp">
					<pattern type="regex" value="true"> SA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="SuperAppVersion">
					<pattern type="regex" value="$1"> SA/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="MQQBrowser">
				<match type="any">
					<pattern type="string">MQQBrowser/</pattern>
				</match>
				<define name="BrowserName" value="MQQBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MQQBrowser/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="WeChat">
				<match type="any">
					<pattern type="string">MicroMessenger/</pattern>
				</match>
				<define name="BrowserName" value="WeChat"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MicroMessenger/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="SputnikBrowser">
				<match type="any">
					<pattern type="string">SputnikBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Sputnik"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">SputnikBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="HuaweiBrowser">
				<match type="any">
					<pattern type="string">HuaweiBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Huawei Browser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">HuaweiBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="MiuiBrowser">
				<match type="any">
					<pattern type="string">MiuiBrowser/</pattern>
				</match>
				<define name="BrowserName" value="MIUI"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MiuiBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="EuiBrowser">
				<match type="any">
					<pattern type="string">EUI Browser/</pattern>
				</match>
				<define name="BrowserName" value="EUI"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">EUI Browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="MZBrowser">
				<match type="any">
					<pattern type="string">MZBrowser/</pattern>
				</match>
				<define name="BrowserName" value="MZBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MZBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="YaaniBrowser">
				<match type="any">
					<pattern type="string">YaaniBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Yaani"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">YaaniBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="OperaTouch">
				<match type="any">
					<pattern type="string">OPT/</pattern>
				</match>
				<define name="BrowserName" value="Opera Touch"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">OPT/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Atom">
				<match type="any">
					<pattern type="string">Atom/</pattern>
				</match>
				<define name="BrowserName" value="Atom"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Atom/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="AndroidWebView">
				<match type="any">
					<pattern type="regex">Android.*Version/&ver;&s;Chrome/&ver;</pattern>
					<pattern type="regex">Android.*Version/&ver;&s;(?:Mobile&s;)?Safari/&ver;&s;Chrome/&ver;</pattern>
					<pattern type="regex">; wv\).*Chrome/&ver;&s;Mobile</pattern>
				</match>
				<define name="BrowserName" value="AndroidBrowser"/>
				<define name="isTouch" value="true"/>
				<define name="inAppBrowser" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Android (&ver;)</pattern>
                    <pattern type="regex" value="$1">Version/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="ChromeMobile">
				<match type="any">
					<pattern type="string">CrMo/</pattern>
					<pattern type="string">Chrome/</pattern>
					<pattern type="string">CriOS/</pattern>
				</match>
				<define name="BrowserName" value="ChromeMobile"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">CrMo/(&ver3d;)</pattern>
					<pattern type="regex" value="$1">Chrome/(&ver3d;)</pattern>
					<pattern type="regex" value="$1">CriOS/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="SkyFire">
				<match>
					<pattern type="string">Skyfire/</pattern>
				</match>
				<define name="BrowserName" value="SkyFire"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Skyfire/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Firefox">
				<match>
					<pattern type="string">FxiOS/</pattern>
				</match>
				<define name="BrowserName" value="MobileFirefox"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">FxiOS/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Edge">
				<match>
					<pattern type="string">EdgiOS/</pattern>
				</match>
				<define name="BrowserName" value="Edge"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">EdgiOS/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="NetFront">
				<match>
					<pattern type="string">NetFrontLifeBrowser/</pattern>
				</match>
				<define name="BrowserName" value="NetFrontLifeBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">NetFront[&word;]*/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Polaris">
				<match type="any">
					<pattern type="string">POLARIS/</pattern>
				</match>
				<define name="BrowserName" value="Polaris"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">POLARIS/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="wOSBrowser">
				<match>
					<pattern type="regex">wOSBrowser</pattern>
					<pattern type="regex">webOS</pattern>
				</match>
				<define name="BrowserName" value="WebOSBrowser"/>
				<define name="isTouch" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">wOSBrowser/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Version/(&ver2d;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">TouchPad</pattern>
				</define>
			</branch>

            <branch name="Ninesky">
				<match>
					<pattern type="string">Ninesky-android-mobile/</pattern>
					<pattern type="string">Ninesky/</pattern>
				</match>
				<define name="BrowserName" value="Ninesky"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Ninesky\-android\-mobile/(&ver;)</pattern>
					<pattern type="regex" value="$1">Ninesky/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="AndroidBrowser">
				<match type="any">
					<pattern type="string">Android</pattern>
					<pattern type="regex">Mac OS X [&num;_]+;.*HTC[_/&s;]</pattern>
				</match>
				<define name="BrowserName" value="AndroidBrowser"/>
				<define name="isTouch" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Android (&ver;)</pattern>
                    <pattern type="regex" value="$1">Version/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="NokiaBrowser">
				<match type="any">
					<pattern type="string">NokiaBrowser/</pattern>
					<pattern type="string">BrowserNG/</pattern>
					<pattern type="string">Nokia</pattern>
					<pattern type="string">SymbianOS</pattern>
				</match>
				<define name="BrowserName" value="NokiaBrowser"/>
				<define name="DeviceVendor" value="Nokia"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">BrowserNG/(&ver;)</pattern>
					<pattern type="regex" value="$1">Version/(&ver;)</pattern>
					<pattern type="regex" value="$1">NokiaBrowser/(&ver;)</pattern>
					<pattern type="regex" value="$1">Nokia[&word;\-]*/(&ver;)</pattern>
					<pattern type="regex" value="$1">Series(?:60|80)/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="MobileSafari">
				<match type="any">
					<pattern type="regex">iP(?:[oa]d|hone).*Mobile Safari</pattern>
					<pattern type="regex">Mobile/[&word;]+(?: Safari/)?</pattern>
					<pattern type="string">iPhone OS</pattern>
				</match>
				<define name="BrowserName" value="MobileSafari"/>
				<define name="isTouch" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver;)</pattern>
				</define>
				<define name="inAppBrowser">
					<pattern type="string" value="true">FBAV</pattern>
					<pattern type="string" value="false">Safari</pattern>
					<pattern type="string" value="true">Mobile</pattern>
				</define>
			</branch>

			<branch name="UbuntuBrowser">
				<match type="any">
					<pattern type="string">Ubuntu; Mobile</pattern>
					<pattern type="string">Ubuntu; Touch</pattern>
				</match>
				<define name="BrowserName" value="UbuntuBrowser"/>
			</branch>

			<branch type="default">
				<define name="BrowserName" value="Unknown"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver;)</pattern>
				</define>
			</branch>

            <branch type="common">
				<define name="BrowserShell">
					<pattern type="string" value="Diigo">Diigo</pattern>
					<pattern type="string" value="Diigo">iChromy</pattern>
					<pattern type="string" value="UCBrowser">UC AppleWebkit</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">iPad</pattern>
					<pattern type="string" value="true">Android 3</pattern>
                    <pattern type="string" value="true">/apad</pattern>
					<pattern type="regex" value="false">Mobile.*Safari/</pattern>
					<pattern type="regex" value="true">Android (?:[4-9]|[&num;]{2,}).* Safari/&ver;</pattern>
					<pattern type="regex" value="true">Chrome/&ver; Safari/</pattern>
				</define>
			</branch>
		</branch>

        <branch name="Presto">
			<match>
				<pattern type="string">Opera</pattern>
			</match>
			<define name="BrowserEngine" value="Presto"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Presto/(&ver;)</pattern>
			</define>
			<branch name="OperaMini">
				<match>
					<pattern type="string">Opera Mini</pattern>
					<pattern type="string">Opera&lt;Ch-Ray&gt;</pattern>
				</match>
				<define name="BrowserName" value="OperaMini"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Opera Mini/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Version/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="OperaMobile">
				<match type="any">
					<pattern type="string">Opera Mobi/</pattern>
					<pattern type="string">Opera Tablet/</pattern>
					<pattern type="regex">Opera/&ver2d;</pattern>
					<pattern type="regex">Opera &ver;</pattern>
				</match>
				<define name="BrowserName" value="OperaMobile"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Opera[&s;/]?(&ver2d;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">Tablet/</pattern>
					<pattern type="string" value="true">Tablet browser</pattern>
				</define>
			</branch>
		</branch>

        <branch name="Gecko">
			<match type="any">
				<pattern type="string">Fennec</pattern>
				<pattern type="string">Firefox</pattern>
				<pattern type="string">Minimo</pattern>
				<pattern type="regex">Gecko.*Moblin</pattern>
				<pattern type="string">Novarra-Vision</pattern>
			</match>
			<define name="BrowserEngine" value="Gecko"/>
			<define name="isTouch" value="true"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">rv:(&ver;)</pattern>
			</define>

            <branch name="Frefox">
				<match type="any">
					<pattern type="string">Firefox/</pattern>
					<pattern type="string">Fennec/</pattern>
				</match>
				<define name="BrowserName" value="MobileFirefox"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Firefox/(&ver;)</pattern>
					<pattern type="regex" value="$1">Fennec/(&ver;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">Tablet browser</pattern>
				</define>
				<define name="MultiTouch" value="true"/>
			</branch>

            <branch name="Minimo">
				<match type="any">
					<pattern type="string">Minimo/</pattern>
				</match>
				<define name="BrowserName" value="Minimo"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Minimo/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Novarra-Vision">
				<match type="any">
					<pattern type="string">Novarra-Vision</pattern>
				</match>
				<define name="BrowserName" value="Novarra-Vision"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Novarra-Vision/(&ver;)</pattern>
				</define>
			</branch>
		</branch>

        <branch name="ProprietaryMobileBrowser">
			<match type="any">
				<pattern type="string">MIDP-</pattern>
				<pattern type="string">CLDC-</pattern>
				<pattern type="string">NetFront</pattern>
				<pattern type="string">Obigo</pattern>
				<pattern type="string">UCBrowser</pattern>
				<pattern type="string">UP.Browser</pattern>
				<pattern type="string">DoCoMo</pattern>
				<pattern type="string">Dalvik/</pattern>
				<pattern type="string">PSP</pattern>
				<pattern type="string">BREW</pattern>
				<pattern type="string">Blazer</pattern>
				<pattern type="string">MQQBrowser</pattern>
			</match>
			<define name="BrowserEngine" value="Proprietary"/>

            <branch name="Obigo">
				<match type="any">
					<pattern type="string">Obigo</pattern>
					<pattern type="string">Teleca</pattern>
				</match>
				<define name="BrowserName" value="Obigo"/>
				<define name="isWAP" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Obigo(?:InternetBrowser|\-Browser|\-MMS|\-Q[&word;]+)?/Q([&word;]+)</pattern>
					<pattern type="regex" value="$1">Obigo[\-&s;]Q([\.&word;]+)</pattern>
					<pattern type="regex" value="$1">Teleca[\-&s;]Q([\.&word;]+)</pattern>
				</define>
			</branch>

            <branch name="Polaris">
				<match type="any">
					<pattern type="string">POLARIS/</pattern>
				</match>
				<define name="BrowserName" value="Polaris"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">POLARIS/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Blackberry">
				<match type="any">
					<pattern type="regex">^Blackberry</pattern>
				</match>
				<define name="BrowserName" value="BlackBerry"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">^Blackberry[&num;]+/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Blazer">
				<match type="any">
					<pattern type="string">Blazer/</pattern>
				</match>
				<define name="BrowserName" value="Blazer"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Blazer/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="MQQBrowser">
				<match type="any">
					<pattern type="string">MQQBrowser/</pattern>
				</match>
				<define name="BrowserName" value="MQQBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MQQBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Dalvik">
				<match type="any">
					<pattern type="string">Dalvik/</pattern>
				</match>
				<define name="BrowserName">Dalvik</define>
				<define name="isBrowser" value='false'/>
				<define name="inAppBrowser" value='true'/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">^Dalvik/(&ver;)</pattern>
				</define>
			</branch>
          <branch name="NetFront">
				<match type="any">
					<pattern type="regex">NetFront(?:/|[&num;])</pattern>
					<pattern type="string">PlayStation Portable</pattern>
				</match>
				<define name="BrowserName" value="NetFront"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">NetFront/?(&ver;)</pattern>
				</define>
			</branch>

            <branch name="OviBrowser">
				<match type="any">
					<pattern type="string">S40OviBrowser</pattern>
				</match>
				<define name="BrowserName" value="OviBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">S40OviBrowser/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="UCBrowser">
				<match type="any">
					<pattern type="string">UCBrowser</pattern>
				</match>
				<define name="BrowserName" value="UCBrowser"/>
				<define name="BrowserEngine" value="UCBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">(?:UC&s;?Browser|UCWEB)/?(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="NokiaBrowser">
				<match type="any">
					<pattern type="string">S60</pattern>
					<pattern type="regex">Series[89]0</pattern>
				</match>
				<define name="BrowserName" value="NokiaBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">(?:s60|Series[89]0)/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Dolfin">
				<match type="any">
					<pattern type="string">Dolfin/</pattern>
				</match>
				<define name="BrowserName" value="Dolfin"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Dolfin/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="SEMC">
				<match type="any">
					<pattern type="string">SEMC-Browser/</pattern>
				</match>
				<define name="BrowserName" value="SEMC"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">SEMC\-Browser/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Jasmine">
				<match type="any">
					<pattern type="string">Jasmine/</pattern>
				</match>
				<define name="BrowserName" value="Jasmine"/>
				<define name="isWAP" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Jasmine/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="OpenWave">
				<match type="any">
					<pattern type="string">UP.Browser/</pattern>
					<pattern type="string">OpenWave/</pattern>
				</match>
				<define name="BrowserName" value="OpenWave"/>
				<define name="isWAP" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">(?:UP\.Browser|OpenWave)/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="DoCoMo">
				<match type="any">
					<pattern type="string">DoCoMo</pattern>
				</match>
				<define name="BrowserName" value="Docomo"/>
				<define name="isWAP" value="true"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">(?:DoCoMo|Docomo)/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="UnknownMobileBrowser" type="default">
				<define name="isWAP" value="true"/>
			</branch>
		</branch>

		<branch name="UnknownMobileBrowser" type="default">
			<define name="BrowserEngine" value="Unknown"/>
			<define name="BrowserName" value="Unknown"/>
			<define name="isWAP">
				<pattern type="string" value="true">WAP</pattern>
			</define>
			<define name="inAppBrowser">
				<pattern type="regex" value="true">CFNetwork/&ver;.*Darwin/&ver;</pattern>
			</define>


            <branch name="iTunes">
				<match type="any">
					<pattern type="string">iTunes-</pattern>
				</match>
				<define name="BrowserName" value="iTunes"/>
				<define name="isBrowser" value="false"/>
			</branch>

			<branch name="MAUI">
				<match type="any">
					<pattern type="string">MAUI</pattern>
				</match>
				<define name="BrowserName" value="MAUI WAP Browser"/>
			</branch>
		</branch>

		<!-- Detect Mobile OS -->
		<branch type="common" name="MobileOS">
			<branch name="FirefoxOS">
				<match>
					<pattern type="regex">\((?:Mobile|Tablet);[^)]+\) Gecko/&ver; Firefox/&ver;</pattern>
				</match>
				<define name="OSFamily" value="FirefoxOS"/>
				<define name="isTouch" value="true"/>
				<define name="isTablet">
					<pattern type="string" value="true">(Tablet;</pattern>
				</define>
				<define name="OSVersion">
					<pattern type="string" value="1.0.1">Gecko/18.0</pattern>
					<pattern type="string" value="1.1">Gecko/18.1</pattern>
					<pattern type="string" value="1.2">Gecko/26.0</pattern>
					<pattern type="string" value="1.3">Gecko/28.0</pattern>
				</define>
			</branch>

            <branch name="Tizen">
				<match>
					<pattern type="string"> Tizen</pattern>
				</match>
				<define name="OSFamily" value="Tizen"/>
				<define name="isTouch" value="true"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Tizen[/&s;](&ver;)</pattern>
				</define>
				<branch name="TV">
					<match type="any">
						<pattern type="string">SMART\-TV</pattern>
						<pattern type="string">TV</pattern>
					</match>
					<define name="isTouch" value="false"/>
					<define name="isTV" value="true"/>
					<define name="isMobile" value="false"/>
					<define name="DeviceVendor" value="SAMSUNG"/>
				</branch>
			</branch>

            <branch name="WindowsPhone">
				<match>
					<pattern type="string">ZuneWP7</pattern>
					<pattern type="string">Lumia</pattern>
					<pattern type="string">Windows Phone;</pattern>
					<pattern type="regex">Windows Phone [^6]</pattern>
					<pattern type="regex">MSIE.*Lumia</pattern>
				</match>
				<define name="OSFamily" value="WindowsPhone"/>
				<define name="DeviceVendor">
					<pattern type="string" value="Nokia">Nokia</pattern>
				</define>
				<define name="isTouch" value="true"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Windows Phone OS (&ver2d;)</pattern>
					<pattern type="regex" value="$1">Windows Phone (&ver2d;)</pattern>
					<pattern type="regex" value="$1">WP(&ver;)</pattern>
					<pattern type="regex" value="$1">Windows NT (&ver;)</pattern>
				</define>
				<define name="isEmulator">
					<pattern type="string" value="true">XDeviceEmulator</pattern>
				</define>
			</branch>

            <branch name="Android">
				<match>
					<pattern type="string">Android</pattern>
					<pattern type="regex">\(Linux;.*;&s;?2\.[23]\.[&num;]+;</pattern>
					<pattern type="regex">\(Linux;.*;&s;?3\.[012]\.[&num;]+;</pattern>
					<pattern type="regex">Adr &ver;</pattern>
					<pattern type="regex">Mac OS X [&num;_]{2,};.*HTC[_/]</pattern>
				</match>
				<define name="OSFamily" value="Android"/>
				<define name="isTouch" value="true"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Android&s;?(&ver;)</pattern>
					<pattern type="regex" value="$1">Adr (&ver;)</pattern>
					<pattern type="regex" value="$1">\(Linux;.*;&s;?([23]\.&ver;);</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">Android 3</pattern>
					<pattern type="string" value="true">Linux;U;3</pattern>
					<pattern type="regex" value="true">Android.*Tablet</pattern>
				</define>
				<define name="OSName">
					<pattern type="regex" value="Android Astro">(?:Android|\(Linux;[^)]+;)&s;?1\.0</pattern>
					<pattern type="regex" value="Android Bender">(?:Android|\(Linux;[^)]+;)&s;?1\.1</pattern>
					<pattern type="regex" value="Android Cupcake">(?:Android|\(Linux;[^)]+;)&s;?1\.5</pattern>
					<pattern type="regex" value="Android Donut">(?:Android|\(Linux;[^)]+;)&s;?1\.6</pattern>
					<pattern type="regex" value="Android Eclair">(?:Android|\(Linux;[^)]+;)&s;?2\.[01]</pattern>
					<pattern type="regex" value="Android Froyo">(?:Android|\(Linux;[^)]+;)&s;?2\.2</pattern>
					<pattern type="regex" value="Android Gingerbread">(?:Android|\(Linux;[^)]+;)&s;?2\.3</pattern>
					<pattern type="regex" value="Android Honeycomb">(?:Android|\(Linux;[^)]+;)&s;?3\.[012]</pattern>
					<pattern type="regex" value="Android Ice Cream Sandwich">(?:Android|\(Linux;[^)]+;)&s;?4\.0</pattern>
					<pattern type="regex" value="Android Jelly Bean">(?:Android|\(Linux;[^)]+;)&s;?4\.[123]</pattern>
					<pattern type="regex" value="Android KitKat">(?:Android|\(Linux;[^)]+;)&s;?4\.4</pattern>
					<pattern type="regex" value="Android Lollipop">(?:Android|\(Linux;[^)]+;)&s;?5\.[&num;]</pattern>
					<pattern type="regex" value="Android Marshmallow">(?:Android|\(Linux;[^)]+;)&s;?6\.[&num;]</pattern>
					<pattern type="regex" value="Android Nougat">(?:Android|\(Linux;[^)]+;)&s;?7\.[&num;]</pattern>
					<pattern type="regex" value="Android Oreo">(?:Android|\(Linux;[^)]+;)&s;?8\.[&num;]</pattern>
					<pattern type="regex" value="Android Pie">Android&s;?9(?:\.[&num;])?[^0-9]</pattern>
                    <pattern type="regex" value="Android 10">Android&s;?10(?:\.[&num;])?[^0-9]</pattern>
					<pattern type="regex" value="Android 11">Android&s;?11(?:\.[&num;])?[^0-9]</pattern>
				</define>
				<define name="MultiTouch">
					<pattern type="regex" value="true">(?:Android|\(Linux;.*;)&s;?(?:2\.[23]|[345]\.).*WebKit</pattern>
					<pattern type="string" value="true">Opera Mobi/</pattern>
					<pattern type="string" value="true">Opera Tablet/</pattern>
				</define>
			</branch>

            <branch name="iPhoneOS">
				<match>
					<pattern type="string">iPhone</pattern>
					<pattern type="string">iPad</pattern>
					<pattern type="string">iPod</pattern>
					<pattern type="string">(iOS</pattern>
					<pattern type="regex"> iOS[ /]</pattern>
					<pattern type="regex">YaBrowser/&ver;&s;YaApp_iOS/&ver;</pattern>
				</match>
				<define name="OSFamily" value="iOS"/>
				<define name="DeviceVendor" value="Apple"/>
				<define name="DeviceName">
					<pattern type="string" value="iPad">iPad</pattern>
                    <pattern type="string" value="iPhone">iPhone</pattern>
					<pattern type="string" value="iPod">iPod</pattern>
					<pattern type="string" value="iPhone">iPh OS</pattern>
				</define>
				<define name="DeviceModel">
					<pattern type="regex" value="$1">(iPad[0-9],[0-9]|iPod[0-9],[0-9]|iPhone[0-9],[0-9])</pattern>
					<pattern type="string" value="iPad">iPad</pattern>
                    <pattern type="string" value="iPhone">iPhone</pattern>
					<pattern type="string" value="iPod">iPod</pattern>
					<pattern type="string" value="iPhone">iPh OS</pattern>
				</define>
				<define name="isTouch">
					<pattern type="string" value="true">(iPhone</pattern>
					<pattern type="string" value="true">iPh OS</pattern>
					<pattern type="string" value="true">(iPad</pattern>
					<pattern type="string" value="true">(iPod</pattern>
                    <pattern type="string" value="true">(Apple iPhone</pattern>
				</define>
				<define name="OSVersion">
					<pattern type="regex" value="1.0">Mobile/1A</pattern>
					<pattern type="regex" value="1.0.1">Mobile/1C25</pattern>
					<pattern type="regex" value="1.0.2">Mobile/1C28</pattern>
					<pattern type="regex" value="1.1.1">Mobile/3A</pattern>
					<pattern type="regex" value="1.1.2">Mobile/3B</pattern>
					<pattern type="regex" value="1.1.3">Mobile/4A93</pattern>
					<pattern type="regex" value="1.1.4">Mobile/4A102</pattern>
					<pattern type="regex" value="2.0">Mobile/5A</pattern>
					<pattern type="regex" value="2.0.1">Mobile/1B</pattern>
					<pattern type="regex" value="2.0.2">Mobile/5C</pattern>
					<pattern type="regex" value="2.1">Mobile/5F</pattern>
					<pattern type="regex" value="2.2">Mobile/5G</pattern>
					<pattern type="regex" value="2.2.1">Mobile/5H</pattern>
					<pattern type="regex" value="3.0">Mobile/7A3</pattern>
					<pattern type="regex" value="3.0.1">Mobile/7A4</pattern>
					<pattern type="regex" value="3.1">Mobile/7C</pattern>
					<pattern type="regex" value="3.1.2">Mobile/7D</pattern>
					<pattern type="regex" value="3.1.3">Mobile/7E</pattern>
					<pattern type="regex" value="4.0">Mobile/8A2</pattern>
					<pattern type="regex" value="4.0.1">Mobile/8A3</pattern>
					<pattern type="regex" value="4.1">Mobile/8B</pattern>
					<pattern type="regex" value="4.2">Mobile/8C</pattern>
					<pattern type="regex" value="4.3">Mobile/8F</pattern>
					<pattern type="regex" value="4.3.3">Mobile/8J</pattern>
					<pattern type="regex" value="4.3.4">Mobile/8K</pattern>
					<pattern type="regex" value="4.3.5">Mobile/8L</pattern>
					<pattern type="regex" value="5.0">Mobile/9A3</pattern>
					<pattern type="regex" value="5.0.1">Mobile/9A4</pattern>
					<pattern type="regex" value="5.1">Mobile/9B1</pattern>
					<pattern type="regex" value="5.1.1">Mobile/9B2</pattern>
					<pattern type="regex" value="6.0">Mobile/10A4</pattern>
					<pattern type="regex" value="6.0.1">Mobile/10A5</pattern>
					<pattern type="regex" value="6.1">Mobile/10B144</pattern>
					<pattern type="regex" value="6.1.1">Mobile/10B145</pattern>
					<pattern type="regex" value="6.1.2">Mobile/10B146</pattern>
					<pattern type="regex" value="6.1.3">Mobile/10B3</pattern>
					<pattern type="regex" value="7.0.3">Mobile/11B511</pattern>
					<pattern type="regex" value="7.0.4">Mobile/11B55</pattern>
					<pattern type="regex" value="7.0.6">Mobile/11B6</pattern>
					<pattern type="regex" value="7.1">Mobile/11D1</pattern>
					<pattern type="regex" value="7.1.1">Mobile/11D20</pattern>
					<pattern type="regex" value="7.1.2">Mobile/11D25</pattern>
					<pattern type="regex" value="8.0">Mobile/12A3</pattern>
					<pattern type="regex" value="8.0.1">Mobile/12A402</pattern>
					<pattern type="regex" value="8.0.2">Mobile/12A405</pattern>
					<pattern type="regex" value="8.1">Mobile/12B41</pattern>
					<pattern type="regex" value="8.1.1">Mobile/12B43</pattern>
					<pattern type="regex" value="$1.$2.$3">(?:iPhone|CPU(?:&s;+OS)?|iPad)&s;+OS[&s;_]+([&num;]+)_([&num;])_([&num;])</pattern>
					<pattern type="regex" value="$1.$2">(?:iPhone|CPU)&s;+OS&s;+([&num;]+)_([&num;])</pattern>
					<pattern type="regex" value="$1">(?:iPhone|CPU)&s;+OS&s;+([&num;]+)</pattern>
					<pattern type="regex" value="$1">iTunes-[&word;\-]+/(&ver;)</pattern>
					<pattern type="regex" value="$1.$2">iPh&s;+OS&s;+([&num;]+)_([&num;])</pattern>
                    <pattern type="regex" value="$1">iOS&s;+(&ver3d;)</pattern>
				</define>
				<define name="isTablet">
					<pattern type="string" value="true">iPad</pattern>
				</define>
				<define name="isEmulator">
					<pattern type="string" value="true">iPhone Simulator</pattern>
					<pattern type="regex" value="true">OS 10_(?:9|[&num;]{2})</pattern>
				</define>
				<define name="MultiTouch">
					<pattern type="string" value="true">WebKit</pattern>
				</define>
			</branch>

            <branch name="Symbian">
				<match>
					<pattern type="string">SymbianOS</pattern>
					<pattern type="string">Symbian</pattern>
					<pattern type="string">Series60</pattern>
					<pattern type="string">Series 60</pattern>
					<pattern type="string">SymbOS</pattern>
					<pattern type="string">S60</pattern>
					<pattern type="string">Series80</pattern>
					<pattern type="string">Series90</pattern>
					<pattern type="regex">^Nokia.*AppleWebKit</pattern>
				</match>
				<define name="OSFamily" value="Symbian"/>
				<define name="DeviceVendor">
					<pattern type="string" value="Nokia">Nokia</pattern>
				</define>
				<define name="OSVersion">
					<pattern type="regex" value="$1">SymbianOS/(&ver;)</pattern>
					<pattern type="regex" value="$1">Symbian/(&ver;)</pattern>
				</define>
			</branch>

            <branch name="Moblin">
				<match>
					<pattern type="string">Moblin/</pattern>
				</match>
				<define name="OSFamily" value="Moblin"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Moblin/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="PalmOS">
				<match>
					<pattern type="string">PalmOS</pattern>
					<pattern type="string">PalmSource</pattern>
				</match>
				<define name="OSFamily" value="PalmOS"/>
			</branch>

            <branch name="Series40">
				<match>
					<pattern type="string">Series40</pattern>
				</match>
				<define name="OSFamily" value="Series40"/>
				<define name="DeviceVendor" value="Nokia"/>
			</branch>

            <branch name="Bada">
				<match>
					<pattern type="string">Bada</pattern>
				</match>
				<define name="OSFamily" value="Bada"/>
				<define name="DeviceVendor" value="SAMSUNG"/>
				<define name="isTouch" value="true"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Bada/(&ver;)</pattern>
				</define>
				<define name="MultiTouch">
					<pattern type="string" value="true">WebKit</pattern>
				</define>
			</branch>

            <branch name="BlackBerry">
				<match>
					<pattern type="string">BlackBerry</pattern>
					<pattern type="regex">BB[&num;]+; (?:Touch|Kbd)</pattern>
				</match>
				<define name="OSFamily" value="BlackBerry"/>
				<define name="DeviceVendor" value="RIM"/>
				<define name="MultiTouch">
					<pattern type="string" value="true">WebKit</pattern>
				</define>
			</branch>

			<branch name="BlackBerryTablet">
				<match type="any">
					<pattern type="string">RIM Tablet OS</pattern>
				</match>
				<define name="isTouch" value="true"/>
				<define name="isTablet" value="true"/>
				<define name="OSFamily" value="RIMTabletOS"/>
				<define name="DeviceVendor" value="RIM"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">RIM Tablet OS (&ver;)</pattern>
				</define>
				<define name="MultiTouch">
					<pattern type="string" value="true">WebKit</pattern>
				</define>
			</branch>

            <branch name="MeeGo">
				<match>
					<pattern type="string">MeeGo</pattern>
					<pattern type="string">Maemo</pattern>
				</match>
				<define name="OSFamily" value="MeeGo"/>
				<define name="isTouch" value="true"/>
			</branch>

            <branch name="WindowsRT">
				<match>
					<pattern type="regex">Windows NT.*ARM;</pattern>
				</match>
				<define name="OSFamily" value="WindowsRT"/>
				<define name="isTouch" value="true"/>
				<define name="isTablet" value="true"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Windows NT (&ver;)</pattern>
				</define>
			</branch>

            <branch name="WindowsMobile">
				<match>
					<pattern type="string">Windows Mobile</pattern>
					<pattern type="string">Windows CE</pattern>
					<pattern type="string">Microsoft Windows</pattern>
					<pattern type="string">Windows NT</pattern>
					<pattern type="string">WindowsMobile</pattern>
					<pattern type="string">PPC;</pattern>
				</match>
				<define name="OSFamily" value="WindowsMobile"/>
				<define name="OSVersion">
					<pattern type="regex" value="$1">Windows&s;*Mobile[/&s;](&ver;)</pattern>
					<pattern type="regex" value="$1">Windows&s;*Phone[/&s;](&ver;)</pattern>
				</define>
			</branch>

            <branch name="WebOS">
				<match>
					<pattern type="string">hpwOS</pattern>
					<pattern type="string">webOS</pattern>
					<pattern type="string">web0S</pattern>
				</match>
				<define name="OSFamily">WebOS</define>
				<define name="OSVersion">
					<pattern type="regex" value="$1">hpwOS/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">webOS/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">web0S/(&ver2d;)</pattern>
					<pattern type="regex" value="1.0">Safari/537\.41</pattern>
					<pattern type="regex" value="2.0">Safari/538\.2</pattern>
					<pattern type="regex" value="3.0">Chrome/38</pattern>
					<pattern type="regex" value="4.0">Chrome/53</pattern>
					<pattern type="regex" value="5.0">Chrome/68</pattern>
				</define>
			</branch>

            <branch name="Linux">
				<match>
					<pattern type="string">Linux</pattern>
				</match>
				<define name="OSFamily">
					<pattern type="string" value="Linux">Linux</pattern>
				</define>
			</branch>

            <branch name="UbuntuTouch">
				<match type="any">
					<pattern type="string">Ubuntu; Mobile</pattern>
					<pattern type="string">Ubuntu; Tablet</pattern>
				</match>
				<define name="OSFamily" value="UbuntuTouch"/>
				<define name="isTouch" value="true"/>
				<define name="isTablet">
					<pattern type="string" value="true">Tablet</pattern>
				</define>
			</branch>

            <branch name="BREW">
				<match>
					<pattern type="string">(BREW</pattern>
				</match>
				<define name="OSFamily">BREW</define>
				<define name="OSVersion">
					<pattern type="regex" value="$1">BREW&s;(&ver3d;)</pattern>
				</define>
			</branch>

            <branch name="Nucleus">
				<match>
					<pattern type="string">Nucleus</pattern>
				</match>
				<define name="OSFamily">Nucleus</define>
			</branch>

            <branch name="Java">
				<match>
					<pattern type="string">J2ME/MIDP</pattern>
				</match>
				<define name="OSFamily">Java</define>
			</branch>

            <branch type="default">
				<define name="OSFamily" value="Unknown"/>
			</branch>

            <define name="J2ME">
				<pattern type="string" value="true">J2ME</pattern>
				<pattern type="string" value="true">MIDP-</pattern>
				<pattern type="string" value="true">CLDC-</pattern>
			</define>
		</branch>
		<branch type="common" name="DeviceProps">
            <define name="DeviceVendor">
				<pattern type="string" value="Lenovo">Lenovo</pattern>
				<pattern type="string" value="Doogee">Doogee</pattern>
				<pattern type="regex" value="Vivo">(?:[&s;\(]vivo[_&s;\-]|V(?:1[8-9][0-9]{2}|2[01][0-9]{2})(?:A|CT|BA|GL|AL|T)?)</pattern>
				<pattern type="regex" value="Huawei">(?:&b;Huawei&b;)</pattern>
				<pattern type="regex" value="Xiaomi">(?:&b;Xiaomi&b;)</pattern>
				<pattern type="regex" value="Xiaomi">(?:M20[01][0-9][A-Z][0-9]{1,2}[A-Z]{1,2})</pattern>
				<pattern type="regex" value="Xiaomi">(?:HM[0-9]{7})</pattern>
				<pattern type="regex" value="Xiaomi">SK[RW]\-H0</pattern>
				<pattern type="regex" value="Xiaomi">(?:POCO&s;F2&s;Pro|POCO X[23])</pattern>
				<pattern type="regex" value="Xiaomi">(?:; (?:A1|F1|F2|T10) Build|; (?:A1|F1|F2|T10)\))</pattern>
				<pattern type="string" value="Zidoo">Zidoo</pattern>
				<pattern type="regex" value="Google">(?:Nexus|Pixel[^/])</pattern>
				<pattern type="regex" value="3Q">(?:MT0812E|MT0739D|MT0729D)</pattern>
				<pattern type="string" value="Bliss">R1001</pattern>
				<pattern type="regex" value="Onda">(?:ONDA X20)</pattern>
				<pattern type="string" value="SAMSUNG">Samsung</pattern>
				<pattern type="regex" value="Siemens">[^M]SIE[\-/_&s;][&word;]+</pattern>
				<pattern type="regex" value="HTC">(?:HTC|HTC[_&s;&num;\-/]|Desire[_&s;&num;\-/]|Sensation|IncredibleS|Evo&s;?(?:3D|4G|WiMax|V|Design|Shift|View)|Wildfire E|; bee[ \)])</pattern>
				<pattern type="regex" value="LG Electronics">(?:([&s;\(]LG[\-almuvwe&s;])|;&s;G3&s;Build|NetCast|LM-[GXKQV][0-9]+(\.FGN)?|; (?:K11|k21|LML212VL|S290|star)[ \)])</pattern>
				<pattern type="regex" value="Nokia">(?:Nokia|Lumia|TA\-[0-9]{4})</pattern>
				<pattern type="regex" value="Yota">(?:YD20[16]|C9660)</pattern>
				<pattern type="string" value="Sony Ericsson">SonyEricsson</pattern>
				<pattern type="string" value="Sony">Sony</pattern>
<!--				<pattern type="regex" value="Sony">(?:&s;h[48][0-9]{3}&s;)</pattern>-->
				<pattern type="regex" value="SAMSUNG">^(?:.*(?:[&s;;\-]))?(GT|SGH|SMT?|EK|SCH?|SHV|SHW|SPH|YP)\-[BECGAITSNPLJM]?[&num;]+</pattern>
				<pattern type="regex" value="SAMSUNG">[-&s;](?:(?:SC\-0|EK\-GC|YP\-G|SCL2)[^ ]+)</pattern>
				<pattern type="regex" value="SAMSUNG">; (?:Active 3|S30|SM-F900F|SM-F916B)[ \)]</pattern>
				<pattern type="regex" value="Nomi">(?:Nomi|i500|i5[0-9]{3})</pattern>
				<pattern type="regex" value="Sony">;&s;?(c|d|e|f|g|h|i)[0-9]{4}</pattern>
				<pattern type="regex" value="Acer">Acer</pattern>
				<pattern type="regex" value="Supersonic">[-&s;](?:SC\-[1^ ]+)</pattern>
				<!--<pattern type="string" value="Imatch">&s;imatch</pattern>-->
				<pattern type="regex" value="Ark">(?:&s;ARK[&s;_\-]|Benefit|Impulse[ _]P[12+]+|elf[ _]s8)</pattern>
				<pattern type="string" value="Avivo">Avivo</pattern>
				<pattern type="string" value="Boway">Boway</pattern>
				<pattern type="regex" value="Beeline">(?:Beeline|Tab_2|&s;A239)</pattern>
                <!--<pattern type="string" value="Beeline">S450m 4G</pattern>-->
				<pattern type="regex" value="Blackview">(?:&b;(E7s|R6)&b;)</pattern>
				<pattern type="string" value="Blackview">Blackview</pattern>
				<pattern type="string" value="CCIT">CCIT</pattern>
				<pattern type="string" value="CKK">CKK</pattern>
				<pattern type="string" value="Chuwi">CHUWI</pattern>
				<pattern type="string" value="Cross">; Cross </pattern>
				<pattern type="regex" value="CUBE">(?:CUBE|U[0-9]{2}GT)</pattern>
				<pattern type="string" value="Celkon">Celkon</pattern>
				<pattern type="string" value="Changhong">Changhong</pattern>
				<pattern type="string" value="Changjiang">Changjiang</pattern>
				<pattern type="string" value="Cyrus">; Cherry</pattern>
				<pattern type="regex" value="Cloudfone">(?:Cloudfone|Cloudpad)</pattern>
				<pattern type="string" value="Colors">; Colors</pattern>
				<pattern type="string" value="Colors">; Colors</pattern>
				<pattern type="string" value="GoldStar">; SP35</pattern>
                <pattern type="regex" value="Irbis">(?:T[XZG][0-9]{2}|SP[0-9]{2,3}&seps;)</pattern>
				<pattern type="regex" value="DEXP">(?:DEXP|Ixion|SP7730A|MS[56]50|M445|Z[1234]5[05]|G[12]5[05]|P380|B[LS][125]5[05]|XL150)</pattern>
				<pattern type="string" value="DiMO">DIMO</pattern>
				<pattern type="string" value="Doov">Doov</pattern>
				<pattern type="regex" value="Digma">(?:Plane|Platina|PS1043MG|PS1042MG|PS7020MG|TS7854M|iDx5)</pattern>
                <pattern type="regex" value="DNS">;&s;S[0-9]{4}(M|Q)</pattern>
				<pattern type="regex" value="DNS">;&s;S[1-9]00[1-9]</pattern>
				<pattern type="regex" value="DNS">DNS[ _]S[0-9]{3,4}</pattern>
				<pattern type="regex" value="DNS">;&s;S450[1-9]&s;</pattern>
				<pattern type="regex" value="DNS">;&s;[MP][7-8][1-9][q|g]{1,2}&s;</pattern>
				<pattern type="regex" value="FinePower">(?:FinePower [a-zA-Z0-9]*)</pattern>
				<pattern type="string" value="Torque">DROIDZ</pattern>
				<pattern type="string" value="Discovery">Discovery v9</pattern>
				<pattern type="string" value="E-Boda">E-Boda</pattern>
				<pattern type="string" value="Ebest">; EBEST</pattern>
				<pattern type="string" value="Evercoss">EVERCOSS</pattern>
				<pattern type="string" value="Elephone">Elephone</pattern>
				<pattern type="regex" value="Elephone">(?:P9000|; U2[ \)])</pattern>
				<pattern type="regex" value="Etuline">(ETL\-[^ ]+)</pattern>
				<pattern type="string" value="Modecom">FreeTab</pattern>
				<pattern type="string" value="G-TiDE">G-TiDE</pattern>
				<pattern type="string" value="GFive">GFIVE</pattern>
				<pattern type="string" value="General Satellite">GS700</pattern>
				<pattern type="regex" value="General Mobile">(?:etab5|e\-tab4|General Mobile|GM 5 Plus|GM [0-9]|GM8 go)</pattern>
				<pattern type="string" value="Ghia">Ghia</pattern>
				<pattern type="regex" value="Telefunken">(?:Telefunken)</pattern>
				<pattern type="regex" value="Starlight">(?:Starlight[_&s;]I[_\-&s;]STAR[_\-&s;]PLUS)</pattern>
				<pattern type="regex" value="IUNI">(?:IUNI[_\-&s;]N1)</pattern>
				<pattern type="regex" value="Geotel">(?:GEOTEL[-_&s;]Note)</pattern>
				<pattern type="string" value="Jinga">JINGA</pattern>
				<pattern type="string" value="Jinga">M500-1</pattern>
				<pattern type="regex" value="Jinga">Basco (L3|S2)</pattern>
				<pattern type="regex" value="Jinga">(?:START3G|PASSPLUS)</pattern>
				<pattern type="regex" value="MegaFon">(?:Megafon)</pattern>
				<pattern type="string" value="Basco">Basco</pattern>
				<pattern type="string" value="Gionee">GIONEE</pattern>
				<pattern type="string" value="GoClever">GOCLEVER</pattern>
				<pattern type="string" value="Hoow">HOOW</pattern>
				<pattern type="string" value="Hosin">HOSIN</pattern>
				<pattern type="string" value="Haier">Haier</pattern>
				<pattern type="regex" value="ASUS">(?:ASUS)</pattern>
				<pattern type="regex" value="Zte">(?:zte[ _\-;])</pattern>
				<pattern type="regex" value="Haier">(?:A3&seps;LITE|I6&seps;INFINITY|a1&seps;aplha|Titan&seps;T5)</pattern>
<!--				<pattern type="regex" value="Haier">(?:[APE][13679]{1,2})</pattern>-->
				<pattern type="regex" value="Wileyfox">(?:Wileyfox|Swift 2)</pattern>
				<pattern type="regex" value="Highscreen">(?:Highscreen|VergeM|Ice2|&s;Thor|Spade|Yummy-Duo|Zera[&s;|_|\-][^ ]*)</pattern>
				<pattern type="regex" value="Highscreen">(?:Boost|Prime (?:S|Mini)|Spark|Alpha R|Spider|Pure [FJ]|PowerFour|Hercules|Power Ice)</pattern>
				<pattern type="regex" value="Highscreen">(?:Power Rage|Bay|Pure[_&s;]Power|Easy [FL]|TCL J620|Power&s;?Five|Prime L|Razar)</pattern>
				<pattern type="regex" value="Highscreen">(?:FEST(XL)?(\-PRO)?)</pattern>
				<pattern type="string" value="Impression">IMPAD</pattern>
				<pattern type="regex" value="Vertex">(?:Impress|Vertex|EAGLE_4G|BACCARA|LION_DUAL|; luck[ \)]|Venus V6)</pattern>
				<pattern type="string" value="Infinix">Infinix</pattern>
				<pattern type="string" value="Intex">Intex</pattern>
				<pattern type="regex" value="JIAYU">(?:JIAYU|; JY\-)</pattern>
				<pattern type="regex" value="Uhans">(?:UHANS|U[123]00|A101S)</pattern>
				<pattern type="string" value="JXD">JXD</pattern>
				<pattern type="string" value="K-Touch">K-Touch</pattern>
				<pattern type="string" value="Keneksi">KENEKSI</pattern>
				<pattern type="string" value="KONKA">KONKA</pattern>
				<pattern type="string" value="KPT">KPT</pattern>
				<pattern type="string" value="Karbonn">Karbonn</pattern>
				<pattern type="string" value="KliTON">KliTON</pattern>
				<pattern type="string" value="Medion">lifetab</pattern>
				<pattern type="string" value="Lenco">Lenco</pattern>
				<pattern type="string" value="Lovme">Lovme</pattern>
				<pattern type="string" value="Malata">Malata</pattern>
				<pattern type="string" value="MaPan">Mapan</pattern>
				<pattern type="string" value="Maxtron">Maxtron</pattern>
				<pattern type="string" value="MEEG">MEEG</pattern>
				<pattern type="string" value="MITO">MITO</pattern>
				<pattern type="string" value="Mlled">MLLED</pattern>
				<pattern type="string" value="Masstel">Masstel</pattern>
				<pattern type="regex" value="MegaFon">(?:MT3A|MFLogin[^ ]*|MS3B)</pattern>
                <!--<pattern type="string" value="MegaFon">T72HM3G</pattern>-->
				<pattern type="string" value="Nokia">; N1&s;</pattern>
				<pattern type="string" value="Mobiistar">Mobiistar</pattern>
				<pattern type="regex" value="Motorola">(?:Motorola|Moto[GE][23]|MOTO?[\-/_&s;]+)</pattern>
				<pattern type="string" value="OBEE">OBEE</pattern>
				<pattern type="string" value="Onida">Onida</pattern>
				<pattern type="string" value="Oppo">; OPPO</pattern>
				<pattern type="string" value="Opsson">OPSSON</pattern>
				<pattern type="regex" value="OnePlus">(?:OnePlus|A0001|ONE E1003|HD1900|AC2001|HD1901|IN2010|IN2020|IN2023)</pattern>
				<pattern type="regex" value="Digma">; (?:Optima|VOX|CITI|LINX)&seps;</pattern>
				<pattern type="regex" value="4Good">(?:; T7[0-9][0-9][im]|; Light[_&s;\-]AT?[0-9]{3}|S501m|4Good|Light B100)</pattern>
				<pattern type="regex" value="Oysters">(?:Oysters|(Arctic|Pacific|Atlantic|Indian[ |_|\-]?[0-9]{3})|;&s;T[0-9]{2,3}[a-z]{0,3}[&s;_\-]3G|7X 3G|;&s;T[7-8][0-9][^ ]+)</pattern>
				<pattern type="string" value="Axioo">PICOPad</pattern>
				<pattern type="string" value="Piranha">Piranha</pattern>
				<pattern type="string" value="Pegatron">chagall</pattern>
				<pattern type="regex" value="Harga HP">(?:Polytron|; Treq)</pattern>
				<pattern type="string" value="PocketBook">PocketBook</pattern>
				<pattern type="string" value="Prestigio">Prestigio</pattern>
				<pattern type="string" value="iGO">; Primo</pattern>
				<pattern type="string" value="QSmart">Q-Smart</pattern>
				<pattern type="string" value="QMobile">QMobile</pattern>
				<pattern type="string" value="QUMO">QUMO</pattern>
				<pattern type="string" value="Ramos">Ramos</pattern>
				<pattern type="regex" value="Rover">(?:RoverPad|Air 7.85 3G)</pattern>
				<pattern type="string" value="Rover">Rover</pattern>
				<pattern type="string" value="Ritmix">Ritmix</pattern>
				<pattern type="string" value="SUPRA">SUPRA</pattern>
				<pattern type="string" value="Spice">; Spice</pattern>
				<pattern type="string" value="Symphony">; Symphony</pattern>
				<pattern type="string" value="Tesla">; Tesla</pattern>
				<pattern type="string" value="T-Smart">; T-Smart</pattern>
				<pattern type="string" value="Tooky">; TOOKY</pattern>
				<pattern type="string" value="Toshiba">; Toshiba</pattern>
				<pattern type="regex" value="Vivax">TPC\-[0-9]{4}</pattern>
				<pattern type="regex" value="Denver">TA[DQ]\-[0-9]{5}</pattern>
				<pattern type="regex" value="Ritmix">RMD\-[0-9]{3}</pattern>
				<pattern type="string" value="MyPhone">; MyPhone</pattern>
				<pattern type="regex" value="Xiaomi">(?:2014811|2014817|2014813|2014818|&s;2013023|Xiaomi&s;|; MI[&s;\-]|HM (NOTE&s;)?1|Redmi|MIX 2)</pattern>
				<pattern type="regex" value="Xiaomi">(?:POCO(PHONE)? F1)</pattern>
				<pattern type="regex" value="Xiaomi">(?:M200[0-9]J1[0-9]S?C)</pattern>
				<pattern type="string" value="TurboPad">; TurboPad</pattern>
				<pattern type="string" value="UMI">; UMI</pattern>
				<pattern type="regex" value="UMI">ROME[_&s;]X</pattern>
				<pattern type="string" value="Uoogou">; Uoogou</pattern>
				<pattern type="string" value="UTime">UTime</pattern>
				<pattern type="string" value="DEXP">Ursus</pattern>
				<!--<pattern type="string" value="Explay">; VEGA</pattern>-->
				<pattern type="string" value="Voto">Voto</pattern>
				<pattern type="string" value="Vexia">Vexia</pattern>
				<pattern type="string" value="Viewsonic">ViewPad</pattern>
				<pattern type="string" value="Woxter">Woxter</pattern>
				<pattern type="regex" value="teXet">(?:teXet|X\-basic|NaviPad|X\-medium|X-pad|;&s;TM-[0-9]{3,4}[a-z]{0,2}|X\-PLUS)</pattern>
				<pattern type="string" value="XOLO">XOLO</pattern>
				<pattern type="string" value="Sony">XPERIA</pattern>
				<pattern type="string" value="Yusun">Yusun</pattern>
				<pattern type="string" value="Zopo">Zopo</pattern>
				<pattern type="regex" value="Zopo">;&s;ZP[0-9]{3}</pattern>
				<pattern type="string" value="Storex">; eZee</pattern>
				<pattern type="string" value="i-Mobile">; i-mobile</pattern>
				<pattern type="string" value="iBall">; iBall</pattern>
				<pattern type="string" value="iOcean">; iOcean</pattern>
				<pattern type="string" value="Lava">; iris</pattern>
				<pattern type="string" value="Rombica">Rombica</pattern>
				<pattern type="regex" value="NEO">NEO[\-&s;][XGZ][0-9]</pattern>
				<pattern type="regex" value="Ainol">Novo&s;?(7|10)</pattern>
				<pattern type="regex" value="KNC">MD\-?[0-9]{3,4}</pattern>
				<pattern type="regex" value="LeEco">(LEX[0-9][0-9][0-9])</pattern>
				<pattern type="regex" value="Leagoo">(?:Elite [0-9]+)</pattern>
				<pattern type="regex" value="Lexibook">MFC[0-9]{3}[a-z]{2}</pattern>
				<pattern type="regex" value="ASUS">ME\-?[0-9]{3}</pattern>
				<pattern type="regex" value="BQ">(?:BQS?[&s;\-_]|BQ7008G)</pattern>
				<pattern type="regex" value="BQ">(?:BQru[a-zA-Z0-9\-_]|AQUARIS (M5|U LITE|U PLUS))</pattern>
				<pattern type="regex" value="Acer">(?:&s;(?:a1|a3|b1|g1)\-(?:[0-9]|[a-z]){3}|Z520)</pattern>
				<pattern type="string" value="PPTV">KING 7</pattern>
				<pattern type="string" value="Alcatel">Alcatel</pattern>
				<pattern type="regex" value="Amazon">(?:amazon|KFTT|KF[A-Z]{4})</pattern>
				<pattern type="regex" value="Fly">(?:; iq[0-9]{3,4}|;&s;FS[4-5][0-9]{2}|Evo Energy4|Fly)</pattern>
				<pattern type="regex" value="Fly">(?:POWER PLUS [035]{1,4}|PHOTO[ _\-]PRO|LIFE&s;(PLAY|JET|ACE))</pattern>
				<pattern type="regex" value="Coolpad">(?:Coolpad|cp3705AS)</pattern>
				<pattern type="regex" value="Smartfren">(?:Andromax|Smartfren)</pattern>
				<pattern type="regex" value="Zte">(?:NX[4-5][&num;]{2}[A-Z]?|Blade[ _][SV][0-9]|Light Tab 2|Blade[_ ][AILT][0-9]{3})</pattern>
				<pattern type="string" value="Thl">Thl</pattern>
				<pattern type="string" value="Minix">Minix</pattern>
				<pattern type="regex" value="Minix">(?:&s;[A-Z]{3}\-[A-Z][0-9]\-[A-Z][ ;\)])</pattern>
				<pattern type="regex" value="Huawei">(?:U8836D|HONOR|HUAWEI|T1-701u)</pattern>
				<pattern type="regex" value="Huawei">(?:[ _\(\-][A-Z]{3}\-[A-Z]{2}[&num;]{1,2}[A-Z]?[ _\);])</pattern>
				<pattern type="regex" value="Huawei">(?:[ _\(\-][A-Z]{3}\-[A-Z][&num;]{2}[A-Z]{0,2}[ _\);])</pattern>
				<pattern type="regex" value="Huawei">(?:[ _\(\-][A-Z][&num;]{2}\-[A-Z][&num;]{2}[ _\);])</pattern>
				<pattern type="regex" value="Huawei">(?:[ _\(\-][A-Z]{2,3}[&num;]\-[A-Z][&num;]{2}[ _\);])</pattern>
				<pattern type="regex" value="Huawei">(?:Mediapad|Ascend|;&s;G700|; u[89][&num;]{3}|CHM-[^ ]+|CHE2-[^ ]+)</pattern>
				<pattern type="regex" value="Huawei">(?:[ _](GEM|PLE)\-[&num;]{3}[A-Z][ _\);])</pattern>
				<pattern type="regex" value="Huawei">(?:G301|HRY-LX1MEB|P30 Pro|P40|T1-A21L)[ _\);]</pattern>
				<pattern type="regex" value="Prestigio">(pmt[&num;]{4}|pmt-[&num;]{3}|psp[&num;]{4}|pmp[&num;]{4}|pap[&num;]{4})</pattern>
                <pattern type="regex" value="Alcatel">(?:tcl[ \-_]|one[_ ]?touch|I216X|5024D_EEA)</pattern>
				<pattern type="regex" value="ASUS">(?:padfone|Transformer)</pattern>
				<pattern type="string" value="ARCHOS">Archos</pattern>
				<pattern type="string" value="ADVAN">advan_</pattern>
				<pattern type="string" value="AKAI">akai</pattern>
				<pattern type="string" value="Allview">allview</pattern>
				<pattern type="string" value="Amaze">amaze</pattern>
				<pattern type="string" value="AMOI">AMOI&s;</pattern>
				<pattern type="regex" value="Casper">(?:Casper|VIA_V8C)</pattern>
				<pattern type="string" value="Dell">Dell</pattern>
				<pattern type="string" value="DNS">airtab</pattern>
				<!--<pattern type="string" value="DNS">DNS</pattern>-->
				<!--<pattern type="regex" value="DNS">;&s;S45([0-9]{2}[A-Z])&s;</pattern>-->
				<pattern type="string" value="Digma">digma</pattern>
				<pattern type="string" value="Explay">; HIT&s;Build</pattern>
            	<pattern type="regex" value="Digma">(?:; HIT&s;|; TT[0-9]{3,5}[MWAGP]|FT3001PM|iDxD[0-9]+|;&s;MID&s;)</pattern>
				<pattern type="string" value="Azumi">azumi</pattern>
				<pattern type="regex" value="Dell">(?:; venue|inspiron)</pattern>
				<pattern type="string" value="TurboPhone4G">TurboPhone4G</pattern>
				<pattern type="string" value="Fly">COMPACT&s;</pattern>
				<pattern type="string" value="Ematic">egd</pattern>
				<pattern type="string" value="Gigabyte">gsmart</pattern>
				<pattern type="regex" value="Hisense">(hisense|hs\-|led[&num;]{2})</pattern>
				<pattern type="string" value="Keener">K-8S</pattern>
				<pattern type="regex" value="HP">hp[&s;\;]</pattern>
				<pattern type="regex" value="Sony">(?:SGPT?|SOL?)\-?[&num;]+</pattern>
				<pattern type="string" value="Infocus">infocus</pattern>
				<pattern type="string" value="Kazam">kazam</pattern>
				<pattern type="string" value="Lanix">ilium</pattern>
				<pattern type="string" value="Panasonic">panasonic</pattern>
				<pattern type="regex" value="Pantech">; im-a[0-9]{3}[a-z]</pattern>
				<pattern type="regex" value="Philips">(?:philips|W6500|W626|W732|S397|Xenium S266|Xenium S566)</pattern>
				<pattern type="string" value="Positivo">Positivo</pattern>
				<pattern type="regex" value="Proscan">; plt[0-9]{4}</pattern>
				<pattern type="string" value="Positivo">ypy</pattern>
				<pattern type="string" value="Tecno">; tecno</pattern>
				<pattern type="regex" value="MTC">(?:MTC[&s;|_]?[&num;]*|SMART[_&s;]?(?:Start|Sprint|Run|Surf|Race|Turbo|Pro|Light))</pattern>
				<pattern type="regex" value="MediaMarkt">(?:3GD52i|3GDi10)</pattern>
				<pattern type="regex" value="Sharp">(?:sh-[0-9]{2}[a-z]?|sbm[0-9]{3,4}|FS80[019]{2}|SH-Z01)</pattern>
				<pattern type="regex" value="Micromax">(?:micromax|Spark|AQ[0-9]{4} Canvas Power)</pattern>
				<pattern type="regex" value="Microsoft">(?:Microsoft|rm-[&num;]{4})</pattern>
				<pattern type="regex" value="Motorola">; xt\-?[&num;]{3,4}</pattern>
				<pattern type="regex" value="Lenovo">(?:IdeaTab|YOGA|Athens15|;&s;K[13]&s;|Tab2A7\-[12]0F|A536|ZUK Z[1-4]+|Z2 Plus|TAB 3G 7-2)</pattern>
				<pattern type="regex" value="Lenovo">(?:TB2-X30L|TB-X304F|K350T)</pattern>
				<pattern type="string" value="Amazon">Kindle</pattern>
				<pattern type="string" value="ARCHOS">ARCHOS</pattern>
				<pattern type="string" value="HYUNDAI">HYUNDAI</pattern>
				<pattern type="regex" value="Wexler">(?:WEXLER|TAB10IS|TAB 8iQ|ULTIMA 7)</pattern>
				<pattern type="regex" value="Thl">(?:W[1-2]00|&seps;T07&seps;)</pattern>
				<pattern type="string" value="Tesco">Hudl</pattern>
				<pattern type="regex" value="ASUS">(?:;[&s;][KZ]0(?:[&num;|&word;]){2}|K00[FL7CEGKRUYZ]|G55[0-9]KL|C103)</pattern>
                <pattern type="regex" value="ASUS">P0[&num;][&word;]</pattern>
				<pattern type="regex" value="HP">(?:Hewlett\-Packard|Slate)</pattern>
				<pattern type="string" value="Palm">Palm</pattern>
				<pattern type="string" value="MEDION">MEDION</pattern>
				<pattern type="string" value="ASUS">Transformer Pad</pattern>
				<pattern type="regex" value="ASUS">Z[ABCDES][0-9]{3}K[LG]</pattern>
				<pattern type="string" value="Avea">Avea</pattern>
				<pattern type="string" value="Hasee">Hasee</pattern>
				<pattern type="regex" value="MARSHALL">(MARSHALL|LONDON)</pattern>
				<pattern type="regex" value="TP-Link">(?:NEFFOS|TP601A|X1[&s;_\-]Light)</pattern>
				<pattern type="string" value="Pyle">PTBL102BCD</pattern>
				<pattern type="string" value="Newman">Newman</pattern>
				<pattern type="string" value="Leagoo">LEAGOO</pattern>
				<pattern type="regex" value="Blackview">(?:BV[456789][015689]00([_&s;]?Pro)?([_-]RU)?(\-F)*|&seps;A8&seps;|A[0-9]{1,2}Pro|P10000[ _]Pro)</pattern>
				<pattern type="regex" value="Oppo">(?:R2001|A3[37]F|F1F|A1601|CPH1[6789][0-9]{2}|RMX[0-9]{4}|A3S)</pattern>
				<pattern type="regex" value="Oppo">(?:GM19[0-9]{2})</pattern>
				<pattern type="regex" value="Oppo">(?:CPH[0-9]{4})</pattern>
				<pattern type="regex" value="Mediatek">(?:MT6572/V[&num;]|MT6572_TD/V[&num;])</pattern>
				<pattern type="string" value="Mlais">Mlais</pattern>
				<pattern type="regex" value="Meizu">(?:Meizu|;&s;(MZ-)?mx?[&num;]s?&s;|MX[456]|;&s;M[4-5][0-9]{2}[a-z]|PRO [567]|M3[se]|M5(?:c|s)|U[12]0|M6T)</pattern>
				<pattern type="regex" value="Meizu">(?:M040)</pattern>
				<pattern type="string" value="Meizu">15 LITE</pattern>
				<pattern type="regex" value="Meizu">(; 16 Build|; 16\))</pattern>
				<pattern type="regex" value="Meizu">(; 15 Build|; 15\))</pattern>
				<pattern type="regex" value="Doogee">&seps;(?:DAGGER|X5&s;|X[5679]pro|X5max|X5s|DG500|X595|X550|Shoot_[12]|Y6(\) \-/_)?)</pattern>
				<pattern type="regex" value="Doogee">(?:BL[12579]{1,2}000|TITANS2_DG700|&s;X[23]0L?[&s;\);]|Y6C|X60L|X5[35]|S55)</pattern>
				<pattern type="regex" value="Doogee">(?:Valencia2[&s;_\-]Y100pro)</pattern>
				<pattern type="regex" value="Wiko">(?:Darkmoon|DARKSIDE|DARKNIGHT|DARKFULL|LENNY2)</pattern>
				<pattern type="regex" value="NVidia">(?:NVidia|SHIELD Tablet)</pattern>
				<pattern type="regex" value="Plark">;&s;PLARK\-P[&num;]+</pattern>
				<pattern type="regex" value="Lark">;&s;LARK&s;</pattern>
				<pattern type="regex" value="Dark">;&s;Dark&s;</pattern>
				<pattern type="regex" value="Alcatel">(?:[ ;\(][13456789][02][0-9]{2}([ADFIKQXY])?(_RU)?[ \);])</pattern>
				<pattern type="regex" value="Explay">(?:Explay|&s;(Advance TV|Flame|Joy_TV|Blaze|Prime|Vision|Sky|Atlant|Polo|M2 3G|Joy|Infinityll|Art 3G)&s;|;&s;i1&s;|HD Quad)</pattern>
				<pattern type="regex" value="Explay">(?:Star TV|Craft|Five|X\-tremer|Surfer|Alto|Fresh|&s;Rio|sQuad|Golf|Tornado|Vega|Indigo|A350|A400|Stark|Bit|D[0-9].[0-9] 3G)</pattern>
				<pattern type="regex" value="Explay">(?:Scream 3G|XL2 3G|MiniTV 3G|solo|Sky Plus|Easy|Atom|Trend 3G|Pulsar|Onyx|CinemaTV 3G|; Light)</pattern>
				<pattern type="regex" value="Explay">(?:Style ;)</pattern>
				<pattern type="regex" value="Explay">(;&s;A[3-4][0-9]{2}&s;)</pattern>
				<pattern type="regex" value="Explay">;&s;A500&s;.*Mobile&s;Safari</pattern>
				<pattern type="regex" value="Acer">;&s;A[0-9]{3,4}&s;</pattern>
				<pattern type="regex" value="Acer">(?:Aspire|A501|A510|A511|A200|A210|A701|A211|M973W|V360|V370|E39|Z500) Build</pattern>
				<pattern type="regex" value="Sony">(?:LT1[58]i|LT2[2569]i|LT26ii|LT26w|LT28h|ST18i|ST2[13567]i|ST21i2|E2115|MT27i|J9110|XQ\-AU52)</pattern>
				<pattern type="regex" value="Vodafone">(?:Vodafone[&s;\-_]|VFD[&s;_\-]600)</pattern>
				<pattern type="regex" value="Vestel">(?:Vestel|;&s;VSP[0-9]{3}[a-z]?|venus[&s;_\-]V3)</pattern>
				<pattern type="regex" value="Cubot">(?:CUBOT|; S200[ \)]|; X19[ \)])</pattern>
				<pattern type="string" value="Tele2">Tele2</pattern>
				<pattern type="string" value="Viking">Viking</pattern>
				<pattern type="regex" value="HOMTOM">(?:HT[0-9]{1,2}(?:Pro)?|; S99[ \)])</pattern>
				<pattern type="string" value="Senkatel">Senkatel</pattern>
				<pattern type="string" value="SENSEIT">SENSEIT</pattern>
				<pattern type="regex" value="Telefunken">(TF\-MID9707G|TF\-MID1007G)</pattern>
				<pattern type="regex" value="Acer">T0[12348]</pattern>
				<pattern type="regex" value="TurboPhone4G">(TurboPhone4G|compact1210)</pattern>
				<pattern type="regex" value="LeEco">;&s;(?:Le|Letv)&s;(?:[a-zA-Z0-9/\_\-\.\+'"\(\)\\,&s;]+)</pattern>
				<pattern type="regex" value="LeEco">X[34]\-[4-9][0-9]</pattern>
				<pattern type="string" value="LeEco">C106-9</pattern>
				<pattern type="string" value="LeEco">C1-U02</pattern>
				<pattern type="regex" value="Leagoo">(?:KIICAA (?:POWER|MIX)|Shark 1|T5C|; T8s[ \)])</pattern>
				<pattern type="regex" value="Bluboo">(?:Maya|Picasso|Bluboo)</pattern>
				<pattern type="regex" value="Cubot">(?:RAINBOW|RAINBOW [0-9]+)</pattern>
				<pattern type="string" value="RITZVIVA">RITZVIVA</pattern>
				<pattern type="regex" value="BlackBerry">(ST[VH]100\-[&num;]|BB[ABDF]100\-[267])</pattern>
				<pattern type="regex" value="OUKITEL">(?:K6000( Pro| Plus)?|K10000|K[45]000|U(7|16) (PLUS|MAX)|U1[56] PRO|&s;C8&s;|C(5|12|17)[_&s;]PRO|K7 POWER|WP5 Pro)</pattern>
				<pattern type="regex" value="M-net">(?:Power[ _]1)</pattern>
				<pattern type="string" value="Ulefone">Ulefone</pattern>
				<pattern type="regex" value="Ulefone">(?:Power[ _](2|3[s]?|5)|S8_PRO|Armor X5|U008 PRO)</pattern>
				<pattern type="string" value="Caterpillar">S60</pattern>
				<pattern type="regex" value="Black Fox">(BMM&seps;?[45][34][123]&seps;?[DS])</pattern>
				<pattern type="regex" value="AGM">(?:AGM )</pattern>
				<pattern type="string" value="Phicomm">Phicomm</pattern>
				<pattern type="string" value="GeoTel">GEOTEL G1</pattern>
				<pattern type="string" value="Apls">GGXQ6580_WEG_L</pattern>
				<pattern type="string" value="Jinga">STORM</pattern>
				<pattern type="regex" value="INOI">(?:INOI)</pattern>
				<pattern type="string" value="Turbo">TURBOX_RAY</pattern>
				<pattern type="string" value="Turbo">TURBOX5SPACE</pattern>
				<pattern type="string" value="DEXP">&s;C6&s;</pattern>
				<pattern type="string" value="Mann">ZUG 5S</pattern>
				<pattern type="string" value="Artel">Adi 5S</pattern>
				<!--<pattern type="regex" value="Fly">(?:.*Android.*(?!IPHONE)&s;5S(&s; B|\)))</pattern>-->
				<pattern type="string" value="Vernee">VERNEE</pattern>
				<pattern type="regex" value="Vernee">(?:APOLLO LITE)</pattern>
				<pattern type="regex" value="GINZZU">(?:GINZZU|S5[01][25]0)</pattern>
				<pattern type="string" value="Ark">S504</pattern>
				<pattern type="regex" value="DEXP">(?:GL255|ES750|ML450|;[\(\) _]B[1234][45][05][\(\) _]|; N310[ \)]|; P410[ \)]|; T155[ \)])</pattern>
				<pattern type="regex" value="Firefly">(?:AURII&seps;Passion)</pattern>
				<pattern type="regex" value="Jinga">(?:OPTIM4G|TOUCH4G|&seps;PASS&seps;|Joy[ \-_]Pro)</pattern>
				<pattern type="string" value="Doogee">MIX Lite</pattern>
				<pattern type="string" value="Doogee">MIX_2</pattern>
				<pattern type="string" value="Xiaomi">&s;MIX&s;</pattern>
				<pattern type="string" value="Yandex">YNDX-000SB</pattern>
				<pattern type="string" value="Maxvi">MAXVI_MS401</pattern>
				<pattern type="string" value="Teclast">X80 Power</pattern>
				<pattern type="string" value="Teclast">TbooK 16 Power</pattern>
				<pattern type="string" value="Teclast">X10 Plus</pattern>
				<pattern type="string" value="Santin">Santin Power</pattern>
				<pattern type="string" value="Pixus">hiPower</pattern>
				<pattern type="regex" value="SAMSUNG">(?:Ativ|N8000)</pattern>
				<pattern type="string" value="Turkcell">Turkcell</pattern>
				<pattern type="string" value="General Mobile">Discovery</pattern>
				<pattern type="regex" value="Meizu">(?:16th)</pattern>
				<pattern type="regex" value="Noa">(?:NOA[_&s;]H10le)</pattern>
				<pattern type="regex" value="UMIDIGI">(?:A[357][ _]Pro)</pattern>
				<pattern type="regex" value="Zte">(?:Z[0-9]{3}[ _\-;])</pattern>
				<pattern type="regex" value="Transsion">ITEL&seps;</pattern>
			</define>
			<define name="DeviceName">
				<pattern type="string" value="Acer Liquid E1">V360</pattern>
				<pattern type="string" value="Acer Liquid E2">V370</pattern>
				<pattern type="string" value="ActiveD 7.4 3G">ActiveD 7.4 3G</pattern>
				<pattern type="string" value="ActiveD 8.2 3G">ActiveD 8.2 3G</pattern>
				<pattern type="regex" value="AirTab 10.1">[MP]100q</pattern>
				<pattern type="string" value="AirTab 9.7">MS9702</pattern>
				<pattern type="string" value="AirTab E79">E79</pattern>
				<pattern type="string" value="AirTab ES9701">ES9701</pattern>
				<pattern type="string" value="AirTab">P71qg</pattern>
				<pattern type="string" value="Alpha GT">Alpha GT</pattern>
				<pattern type="string" value="Alpha GTR">Alpha GTR</pattern>
				<pattern type="string" value="Alpha Rage">Alpha Rage</pattern>
				<pattern type="string" value="Alto">Alto</pattern>
				<pattern type="string" value="Arc S">LT18i</pattern>
				<pattern type="regex" value="Ascend D1">U95[10]0</pattern>
				<pattern type="string" value="Ascend G300">HUAWEI U8815</pattern>
				<pattern type="string" value="Ascend G330">HUAWEI U8825-1</pattern>
				<pattern type="string" value="Ascend G500 Pro">U8836D</pattern>
				<pattern type="string" value="Ascend P1">U9200</pattern>
				<pattern type="string" value="Ascend P1 XL">U9200E</pattern>
				<pattern type="string" value="Ascend P6">HUAWEI P6-U06</pattern>
				<pattern type="string" value="Ascend Y201 Pro">HUAWEI U8666E</pattern>
				<pattern type="regex" value="Ativ S">(?:Ativ S|GT-I8750)</pattern>
				<pattern type="string" value="Boost">Boost</pattern>
				<pattern type="string" value="Communicator">Communicator</pattern>
				<pattern type="string" value="Cookie Smart">T375</pattern>
				<pattern type="string" value="Daewoo Electronics">DTR-07FSBH</pattern>
				<pattern type="string" value="Desire HD">HTC Desire HD A9191</pattern>
				<pattern type="string" value="Diamond">IQ444</pattern>
				<pattern type="string" value="Digma">MS3B</pattern>
				<pattern type="string" value="Dream">Dream</pattern>
				<pattern type="string" value="E615 Optimus L5 Dual">LG-E615</pattern>
				<pattern type="string" value="Energie">IQ440</pattern>
				<pattern type="string" value="Ericsson Hallon">MT15i</pattern>
				<pattern type="string" value="Ericsson Xperia neo V">MT11i</pattern>
				<pattern type="string" value="EVO 3D">HTC EVO 3D X515m</pattern>
				<pattern type="string" value="Evoke">IQ430</pattern>
				<pattern type="string" value="Evolution Tab-970">rk30sdk</pattern>
				<pattern type="string" value="Explay A350 TV">A350 TV</pattern>
				<pattern type="string" value="Explay A351">A351</pattern>
				<pattern type="string" value="Explay A400">A400</pattern>
				<pattern type="string" value="Five">Five</pattern>
				<pattern type="string" value="Fonepad">ME371MG</pattern>
				<pattern type="string" value="G2">JY-G2</pattern>
				<pattern type="string" value="G2">LG-D802</pattern>
				<pattern type="string" value="G3">JIAYU G3</pattern>
				<pattern type="string" value="G3">JY-G3</pattern>
				<pattern type="regex" value="Galaxy A3">SM\-A3[012]0[FH]</pattern>
				<pattern type="regex" value="Galaxy A5">SM\-A5[012]0[FH]</pattern>
				<pattern type="regex" value="Galaxy A7">SM\-A7[012]0[FH]</pattern>
				<pattern type="string" value="Galaxy A8">SM-A800F</pattern>
				<pattern type="string" value="Galaxy A9">SM-A9000</pattern>
				<pattern type="regex" value="Galaxy Ace 3">GT\-S727[02]</pattern>
				<pattern type="regex" value="Galaxy Ace 4 Duos">(?:GT\-G313H|SM\-G313HU)</pattern>
				<pattern type="regex" value="Galaxy Ace 4 Neo">(?:GT\-G318H|SM\-G318H)</pattern>
				<pattern type="regex" value="Galaxy Ace 4 Lite">(?:GT\-G313H|SM\-G313H)</pattern>
				<pattern type="string" value="Galaxy Ace Duos">GT-S6802</pattern>
				<pattern type="string" value="Galaxy Ace Style">SM-G357</pattern>
				<pattern type="string" value="Galaxy Ace">GT-S5830</pattern>
				<pattern type="string" value="Galaxy Ace II">GT-I8160</pattern>
				<pattern type="string" value="Galaxy Ace II X">GT-S7560</pattern>
				<pattern type="string" value="Galaxy Ace Plus">GT-S7500</pattern>
				<pattern type="string" value="Galaxy Alpha">SM-G850F</pattern>
				<pattern type="string" value="Galaxy Core">GT-I8262</pattern>
				<pattern type="string" value="Galaxy Core Advance">GT-I8580</pattern>
				<pattern type="string" value="Galaxy Core 2">SM-G355H</pattern>
				<pattern type="string" value="Galaxy Core LTE">GT-G386F</pattern>
				<pattern type="regex" value="Galaxy Core Prime">SM\-G36[01]H</pattern>
				<pattern type="regex" value="Galaxy E5">SM\-E500[FH]</pattern>
				<pattern type="string" value="Galaxy E7">SM-E700F</pattern>
				<pattern type="regex" value="Galaxy Fame">(?:GT\-S6790|GT\-S6810)</pattern>
				<pattern type="string" value="Galaxy On7">SM-E600F</pattern>
				<pattern type="string" value="Galaxy Gio">GT-S5660</pattern>
				<pattern type="regex" value="Galaxy Grand 2">SM\-G710[025]</pattern>
				<pattern type="string" value="Galaxy Grand">GT-I9082</pattern>
				<pattern type="string" value="Galaxy Grand Neo">GT-I9060</pattern>
				<pattern type="regex" value="Galaxy Grand Prime">SM\-G53[01][FH]</pattern>
				<pattern type="string" value="Galaxy K Zoom">SM-C115</pattern>
				<pattern type="regex" value="Galaxy J1 Mini">SM\-J10[56][FH]</pattern>
				<pattern type="regex" value="Galaxy J1">SM\-J1[012]0</pattern>
				<pattern type="string" value="Galaxy J1 Ace Neo">SM-J111F</pattern>
				<pattern type="string" value="Galaxy J2 Prime">SM-G532F</pattern>
				<pattern type="regex" value="Galaxy J2">SM\-J200[FH]</pattern>
				<pattern type="regex" value="Galaxy J3">SM\-J3[23]0</pattern>
				<pattern type="string" value="Galaxy J5 Prime">SM-G570F</pattern>
				<pattern type="regex" value="Galaxy J5">SM\-J5[0123]0[FH]</pattern>
				<pattern type="string" value="Galaxy J7 Prime">SM-J610F</pattern>
				<pattern type="string" value="Galaxy J7 Neo">SM-J701F</pattern>
				<pattern type="regex" value="Galaxy J7">SM\-J7[0123]0[FH]</pattern>
				<pattern type="string" value="Galaxy Mega 5.8">GT-I9152</pattern>
				<pattern type="regex" value="Galaxy Mega 6.3">GT\-I920[05]</pattern>
				<pattern type="string" value="Galaxy Mini">GT-S5570</pattern>
				<pattern type="string" value="Galaxy Mini 2">GT-S6500D</pattern>
				<pattern type="string" value="Galaxy Note 10.1 2014">SM-P601</pattern>
				<pattern type="string" value="Galaxy Note 10.1">GT-N8000</pattern>
				<pattern type="string" value="Galaxy Note 3">SM-N900</pattern>
				<pattern type="string" value="Galaxy Note 3 Neo">SM-N750</pattern>
				<pattern type="regex" value="Galaxy Note 4">SM\-N910[HFCG0]</pattern>
				<pattern type="string" value="Galaxy Note 8">SM-N950F</pattern>
				<pattern type="string" value="Galaxy Note 8.0">GT-N5100</pattern>
				<pattern type="string" value="Galaxy Note">GT-N7000</pattern>
				<pattern type="string" value="Galaxy Note Edge">SM-N915F</pattern>
				<pattern type="string" value="Galaxy Note II">GT-N7100</pattern>
				<pattern type="string" value="Galaxy Note II LTE">GT-N7105</pattern>
				<pattern type="string" value="Galaxy Pocket">GT-S5300</pattern>
				<pattern type="string" value="Galaxy Pocket duos">GT-S5302</pattern>
				<pattern type="string" value="Galaxy Pocket Neo">GT-S5310</pattern>
				<pattern type="string" value="Galaxy Premier">GT-I9260</pattern>
				<pattern type="string" value="Galaxy R">GT-I9103</pattern>
				<pattern type="string" value="Galaxy S3 Neo">GT-I9301I</pattern>
				<pattern type="string" value="Galaxy S4">GT-I9500</pattern>
				<pattern type="string" value="Galaxy S4 Active">GT-I9295</pattern>
				<pattern type="string" value="Galaxy S4 Zoom">SM-C101</pattern>
				<pattern type="string" value="Galaxy S4 VE LTE">GT-I9515</pattern>
				<pattern type="string" value="Galaxy S4 LTE">GT-I9505</pattern>
				<pattern type="string" value="Galaxy S4 LTE+">GT-I9506</pattern>
				<pattern type="string" value="Galaxy S4 mini Duos">GT-I9192</pattern>
				<pattern type="regex" value="Galaxy S4 mini">GT\-I919[05]</pattern>
				<pattern type="string" value="Galaxy S5 Duos">SM-G900FD</pattern>
				<pattern type="string" value="Galaxy S5 Neo">SM-G903F</pattern>
				<pattern type="regex" value="Galaxy S5 Mini">SM\-G800[HF]</pattern>
				<pattern type="string" value="Galaxy S5">SM-G900</pattern>
				<pattern type="string" value="Galaxy S5 Prime">SM-G906S</pattern>
				<pattern type="string" value="Galaxy S5 LTE">SM-G901F</pattern>
				<pattern type="string" value="Galaxy S6">SM-G920F</pattern>
				<pattern type="string" value="Galaxy S6 Edge">SM-G925F</pattern>
				<pattern type="regex" value="Galaxy S7">SM\-G93[05]F</pattern>
				<pattern type="regex" value="Galaxy S8">SM\-G95[05]F</pattern>
				<pattern type="string" value="Galaxy S Advance">GT-I9070</pattern>
				<pattern type="string" value="Galaxy S Duos">GT-S7562</pattern>
				<pattern type="string" value="Galaxy S Duos 2">GT-S7582</pattern>
				<pattern type="string" value="Galaxy S">GT-I9000</pattern>
				<pattern type="string" value="Galaxy S II">GT-I9100</pattern>
				<pattern type="regex" value="Galaxy S III">GT\-I930[05]</pattern>
				<pattern type="string" value="Galaxy S III mini">GT-I8190</pattern>
				<pattern type="string" value="GALAXY S II Plus">GT-I9105</pattern>
				<pattern type="string" value="Galaxy S Plus">GT-I9001</pattern>
				<pattern type="string" value="Galaxy S scLCD">GT-I9003</pattern>
				<pattern type="string" value="Galaxy Star">GT-S5282</pattern>
				<pattern type="regex" value="Galaxy Star Advance">(?:GT\-G350|SM\-G350E)</pattern>
				<pattern type="string" value="Galaxy Star Plus">GT-S7262</pattern>
				<pattern type="string" value="Galaxy Tab 10.1">GT-P7500</pattern>
				<pattern type="regex" value="Galaxy Tab 2 10.1">GT\-P51[01]0</pattern>
				<pattern type="regex" value="Galaxy Tab 2 7.0">GT\-P31[01]0</pattern>
				<pattern type="regex" value="Galaxy Tab 3 10.1">GT\-P52[01]0</pattern>
				<pattern type="regex" value="Galaxy Tab 3 7.0 Lite">SM\-T11[0136]</pattern>
				<pattern type="regex" value="Galaxy Tab 3 7.0">SM\-T21[01]</pattern>
				<pattern type="regex" value="Galaxy Tab 3 8.0">SM\-T31[015]</pattern>
				<pattern type="regex" value="Galaxy Tab 4 10.1">SM\-T53[0135]</pattern>
				<pattern type="regex" value="Galaxy Tab 4 7.0">SM\-T23[015]</pattern>
				<pattern type="regex" value="Galaxy Tab 4 8.0">SM\-T33[015]</pattern>
				<pattern type="string" value="Galaxy Tab 4 8.4">SM-T705</pattern>
				<pattern type="string" value="Galaxy Tab 7.7">GT-P6800</pattern>
				<pattern type="string" value="Galaxy Tab Active 8.0">SM-T365</pattern>
				<pattern type="regex" value="Galaxy Tab A 10.1">SM\-T58[05]</pattern>
				<pattern type="regex" value="Galaxy Tab A 7.0">SM\-T28[05]</pattern>
				<pattern type="regex" value="Galaxy Tab A 8.0">SM\-T35[05]</pattern>
				<pattern type="regex" value="Galaxy Tab A 9.7">SM\-T55[05]</pattern>
				<pattern type="regex" value="Galaxy Tab E 9.6">SM\-T56[01]</pattern>
				<pattern type="regex" value="Galaxy Tab S2 8.0">SM\-T71[0359]</pattern>
				<pattern type="string" value="Galaxy Tab S2 8.4">SM-T700</pattern>
				<pattern type="regex" value="Galaxy Tab S2 9.7">SM\-T81[0359]</pattern>
				<pattern type="regex" value="Galaxy Tab S 10.5">SM-T80[05]</pattern>
				<pattern type="regex" value="Galaxy Tab Pro 8.4">SM\-T32[05]</pattern>
				<pattern type="regex" value="Galaxy Tab Pro 10.1">SM\-T52[05]</pattern>
				<pattern type="string" value="Galaxy Trend">GT-S7390</pattern>
				<pattern type="string" value="Galaxy Trend Duos">GT-S7392</pattern>
				<pattern type="string" value="Galaxy Trend Plus">GT-S7580</pattern>
				<pattern type="string" value="Galaxy W">GT-I8150</pattern>
				<pattern type="string" value="Galaxy Win">GT-I8552</pattern>
				<pattern type="string" value="Galaxy xCover">GT-S5690</pattern>
				<pattern type="string" value="Galaxy xCover 2">GT-S7710</pattern>
				<pattern type="regex" value="Galaxy xCover 3">SM\-G38[89]F</pattern>
				<pattern type="string" value="Galaxy Y Duos">GT-S6102</pattern>
				<pattern type="string" value="Galaxy Y">GT-S5360</pattern>
				<pattern type="string" value="Galaxy Young 2">GT-G130H</pattern>
				<pattern type="string" value="Galaxy Young Duos">GT-S6312</pattern>
				<pattern type="string" value="Metro 313">SM-B313E</pattern>
				<pattern type="string" value="Metro XL">SM-B355E</pattern>
				<pattern type="string" value="Rex 70">GT-S3802</pattern>
				<pattern type="string" value="Rex 90">GT-S5292</pattern>
				<pattern type="string" value="Corby II">GT-S3850</pattern>
				<pattern type="string" value="Star">GT-S5230</pattern>
				<pattern type="string" value="Star II">GT-S5260</pattern>
				<pattern type="string" value="Star II Duos">GT-C6712</pattern>
				<pattern type="string" value="Star 3 Duos">GT-S5222</pattern>
				<pattern type="string" value="Omnia M">GT-S7530</pattern>
				<pattern type="string" value="Omnia W">GT-I8350</pattern>
				<pattern type="string" value="Genius">IQ445</pattern>
				<pattern type="string" value="Golf">Golf</pattern>
				<pattern type="string" value="HD Quad">HD Quad</pattern>
				<pattern type="string" value="Honor 2">HUAWEI U9508</pattern>
				<pattern type="string" value="Honor 4C">CHM-U01</pattern>
				<pattern type="string" value="Honor Pro">HUAWEI U8950-1</pattern>
				<pattern type="string" value="Honor">U8860</pattern>
				<pattern type="string" value="Horizon">Fly_IQ450</pattern>
				<pattern type="string" value="Iconia Tab A211">A211</pattern>
				<pattern type="string" value="Iconia Tab A511">A511</pattern>
				<pattern type="string" value="Iconia Tab A701">A701</pattern>
				<pattern type="string" value="IdeaPhone">Lenovo P770</pattern>
				<pattern type="string" value="IdeaPhone">Lenovo P780_ROW</pattern>
				<pattern type="string" value="IdeaPhone S720">Lenovo S720</pattern>
				<pattern type="string" value="IdeaTab A1000">IdeaTabA1000-F</pattern>
				<pattern type="string" value="iDxD4 3G">iDxD4</pattern>
				<pattern type="string" value="Infinity II">Infinityll</pattern>
				<pattern type="string" value="Infinity">Infinity</pattern>
				<pattern type="string" value="Jazz">IQ238</pattern>
				<pattern type="string" value="Jolla">alien_jolla_bionic</pattern>
				<pattern type="string" value="Leader">ZP900</pattern>
				<pattern type="string" value="Login 3">MFLogin3</pattern>
				<pattern type="string" value="Login">MegaFon_SP-AI</pattern>
				<pattern type="string" value="Login+">MFLoginPh</pattern>
				<pattern type="string" value="Magic">IQ446</pattern>
				<pattern type="string" value="MediaPad 10 FHD">MediaPad 10 FHD</pattern>
				<pattern type="string" value="MediaPad 7 Lite">MediaPad 7 Lite</pattern>
				<pattern type="string" value="MeMO Pad HD 7">ME173X</pattern>
				<pattern type="regex" value="MeMO Pad FHD 10">ME302[CK]</pattern>
				<pattern type="string" value="Miracle">Fly_IQ442</pattern>
				<pattern type="string" value="MTC 968">MTC_968</pattern>
				<pattern type="string" value="MultiPad 2">PMP7280C3G</pattern>
				<pattern type="string" value="MultiPad 7.0 Prime">PMP7170B3G</pattern>
				<pattern type="string" value="MultiPhone">PAP4055DUO</pattern>
				<pattern type="string" value="MX2">M040</pattern>
				<pattern type="string" value="N1">&s;N1</pattern>
				<pattern type="string" value="Navigator">Navigator</pattern>
				<pattern type="string" value="One Touch Pixi">ONE TOUCH 4007D</pattern>
				<pattern type="regex" value="One Touch POP 2">5042D</pattern>
				<pattern type="regex" value="One Touch POP 3">(?:5025D|5054D|5065D)</pattern>
				<pattern type="regex" value="One Touch POP Star">5022D</pattern>
				<pattern type="regex" value="One Touch POP Up">6044D</pattern>
				<pattern type="regex" value="One Touch IDOL X+">6043D</pattern>
				<pattern type="string" value="Onliner1">Onliner1</pattern>
				<pattern type="string" value="Onliner2">Onliner2</pattern>
				<pattern type="string" value="Optimus 4X HD">LG-P880</pattern>
				<pattern type="string" value="Optimus G">LG-E975</pattern>
				<pattern type="string" value="Optimus L3 Dual">LG-E405</pattern>
				<pattern type="string" value="Optimus L3">LG-E400</pattern>
				<pattern type="string" value="Optimus L4 II Dual">LG-E445</pattern>
				<pattern type="string" value="Optimus L5">LG-E612</pattern>
				<pattern type="string" value="Optimus L7 II Dual">LG-P715</pattern>
				<pattern type="regex" value="Optimus L7">LG-P70[05]</pattern>
				<pattern type="string" value="Optimus L9">LG-P765</pattern>
				<pattern type="string" value="Optimus Net Dual">LG-P698</pattern>
				<pattern type="string" value="Optimus One">LG-P500</pattern>
				<pattern type="string" value="PadFone 2">PadFone 2</pattern>
				<pattern type="string" value="PadFone">PadFone</pattern>
				<pattern type="string" value="Polo">Polo</pattern>
				<pattern type="string" value="Pride">IQ255</pattern>
				<pattern type="string" value="Pyle Astro 10.1">PTBL102BCD</pattern>
				<pattern type="string" value="R413">SENSEIT_R413</pattern>
				<pattern type="string" value="Radiance">IQ441</pattern>
				<pattern type="string" value="RAZR i">XT890</pattern>
				<pattern type="string" value="S4003">s4003</pattern>
				<pattern type="string" value="S4004M">S4004M</pattern>
				<pattern type="string" value="S4501M">S4501M</pattern>
				<pattern type="string" value="S4502M">s4502M</pattern>
				<pattern type="string" value="S4502">s4502</pattern>
				<pattern type="string" value="S4503Q">S4503Q</pattern>
				<pattern type="string" value="S4505M">S4505M</pattern>
				<pattern type="string" value="s4506">S4506</pattern>
				<pattern type="string" value="S5001">S5001</pattern>
				<pattern type="string" value="S820">Athens15</pattern>
				<pattern type="string" value="Scorpio">ZP980</pattern>
				<pattern type="string" value="SI4301">SI4301</pattern>
				<pattern type="string" value="Sky Plus">Sky Plus</pattern>
				<pattern type="regex" value="Smarto">(?:3GD52i|3GDi10)</pattern>
				<pattern type="string" value="Solo">Solo</pattern>
				<pattern type="string" value="Spark">IQ4404</pattern>
				<!--<pattern type="string" value="Spark">Spark</pattern>-->
				<pattern type="string" value="sQuad 10.01">sQuad-10.01</pattern>
				<pattern type="string" value="sQuad 10.02 3G">sQuad 10.02 3G</pattern>
				<pattern type="string" value="sQuad 10.06 3G">sQuad 10.06 3G</pattern>
				<pattern type="string" value="sQuad 7.82 3G">sQuad 7.82 3G</pattern>
				<pattern type="string" value="sQuad 9.71">sQuad_9.71</pattern>
				<pattern type="string" value="Star TV">Star TV</pattern>
				<pattern type="string" value="S-TELL M200">M200</pattern>
				<pattern type="string" value="Strike">BQS-5020</pattern>
				<pattern type="string" value="Surfer 7.03">Surfer7.03</pattern>
				<pattern type="string" value="Surfer 7.04">Surfer 7.04</pattern>
				<pattern type="string" value="Surfer 7.32 3G">Surfer 7.32 3G</pattern>
				<pattern type="string" value="Surfer 7.34 3G">Surfer 7.34</pattern>
				<pattern type="string" value="Surfer 8.31 3G">Surfer 8.31 3G</pattern>
				<pattern type="string" value="SURFpad">Obreey SURFpad</pattern>
				<pattern type="string" value="T272">T272</pattern>
				<pattern type="string" value="V880E Dual">ZTE V880E</pattern>
				<pattern type="string" value="Vega">S4A1</pattern>
				<pattern type="string" value="ViewPad 7">ViewPad7</pattern>
				<pattern type="string" value="Vision">HUAWEI-U8850</pattern>
				<pattern type="string" value="Vista">IQ451</pattern>
				<pattern type="string" value="Vogue">FLY IQ256</pattern>
				<pattern type="string" value="W626">W626</pattern>
				<pattern type="string" value="Wave 525">GT-S5250</pattern>
				<pattern type="string" value="Wave Y">GT-S5380D</pattern>
				<pattern type="string" value="Wave II">GT-S8530</pattern>
				<pattern type="string" value="Wave 3">GT-S8600</pattern>
				<pattern type="string" value="Wave M">GT-S7250D</pattern>
				<pattern type="string" value="Wave">GT-S8500</pattern>
				<pattern type="string" value="Wizard">Fly IQ245</pattern>
				<pattern type="string" value="Wizard Plus">Fly IQ245 Plus</pattern>
				<pattern type="string" value="WT19i">WT19i</pattern>
				<pattern type="string" value="X-basic">X-basic</pattern>
				<pattern type="string" value="Xenium W336">Philips W336</pattern>
				<pattern type="string" value="Xenium W632">Philips W632</pattern>
				<pattern type="string" value="Xenium W6500">W6500</pattern>
				<pattern type="string" value="Xenium W6500">W6500</pattern>
				<pattern type="string" value="Xenium W732">W732</pattern>
				<pattern type="string" value="Xenium W832">Philips W832</pattern>
				<pattern type="string" value="Xenium W8510">Philips W8510</pattern>
				<pattern type="string" value="Xperia acro S">LT26w</pattern>
				<pattern type="string" value="Xperia Arc">LT15i</pattern>
				<pattern type="string" value="Xperia C">C2305</pattern>
				<pattern type="string" value="Xperia E3">D2203</pattern>
				<pattern type="string" value="Xperia E4 Dual">E2115</pattern>
				<pattern type="string" value="Xperia E dual">C1605</pattern>
				<pattern type="string" value="Xperia Go">ST27i</pattern>
				<pattern type="string" value="Xperia ion">LT28h</pattern>
				<pattern type="string" value="Xperia J1 Compact">D5788</pattern>
				<pattern type="string" value="Xperia J">ST26i</pattern>
				<pattern type="string" value="Xperia L">C2105</pattern>
				<pattern type="regex" value="Xperia M2">D230[235]</pattern>
				<pattern type="string" value="Xperia M4">E2303</pattern>
				<pattern type="string" value="Xperia M4 Aqua">E2306</pattern>
				<pattern type="regex" value="Xperia M4 Aqua Dual">E23[03]3</pattern>
				<pattern type="string" value="Xperia M">C1905</pattern>
				<pattern type="string" value="Xperia miro">ST23i</pattern>
				<pattern type="string" value="Xperia P">LT22i</pattern>
				<pattern type="string" value="Xperia ray">ST18i</pattern>
				<pattern type="string" value="Xperia SL">LT26ii</pattern>
				<pattern type="string" value="Xperia S">LT26i</pattern>
				<pattern type="string" value="Xperia sola">MT27i</pattern>
				<pattern type="string" value="Xperia SP">C5303</pattern>
				<pattern type="regex" value="Xperia T2 Ultra">(?:D5303|D5316|D5306)</pattern>
				<pattern type="string" value="Xperia T2 Ultra Dual">D5322</pattern>
				<pattern type="regex" value="Xperia T3">(?:D5103|D5102|D5106)</pattern>
				<pattern type="string" value="Xperia Tablet Z">SGP321</pattern>
				<pattern type="string" value="Xperia tipo dual">ST21i</pattern>
				<pattern type="string" value="Xperia TX">LT29i</pattern>
				<pattern type="string" value="Xperia U">ST25i</pattern>
				<pattern type="string" value="Xperia V">LT25i</pattern>
				<pattern type="string" value="Xperia Z1">C6903</pattern>
				<pattern type="string" value="Xperia Z1 Compact">D5503</pattern>
				<pattern type="string" value="Xperia Z2">C6502</pattern>
				<pattern type="regex" value="Xperia Z3 Compact">D58[03]3</pattern>
				<pattern type="string" value="Xperia Z3 Dual">D6633</pattern>
				<pattern type="string" value="Xperia Z3">D6603</pattern>
				<pattern type="string" value="Xperia Z3+">E6553</pattern>
				<pattern type="string" value="Xperia Z">C6602</pattern>
				<pattern type="string" value="Xperia Z">C6603</pattern>
				<pattern type="regex" value="Xperia ZL">C650[23]</pattern>
				<pattern type="regex" value="Xperia ZR">C550[23]</pattern>
				<pattern type="string" value="Xperia Z Ultra">C6833</pattern>
				<pattern type="string" value="X-tremer">X-tremer</pattern>
				<pattern type="regex" value="Yota Phone 2">YD201</pattern>
				<pattern type="regex" value="Yota Phone">C9660</pattern>
				<pattern type="string" value="Yoyo">R2001</pattern>
				<pattern type="string" value="Yummy-Duo">Yummy-Duo</pattern>
				<pattern type="string" value="Z10">Z10</pattern>
				<pattern type="string" value="Z30">Z30</pattern>
				<pattern type="string" value="ZP300+">ZP300+</pattern>
				<pattern type="regex" value="$1">(Lumia [&num;]+(?:&seps;XL)?)</pattern>
				<pattern type="regex" value="$1">(Slate [&word;|&num;|\-|_|/|&s;]+)\|</pattern>
				<pattern type="regex" value="">;&s;+?&notmodels; Build</pattern>
				<pattern type="regex" value="$1">;&s;+?(&model;) Build</pattern>
				<!--Небольной хак, чтобы исключит матч слов, которые похожи на модели, но ими не являются-->
				<pattern type="regex" value="">Android&seps;&ver;(?:&seps;&androids;)?;&s;+&notmodels;\)&s;</pattern>
				<pattern type="regex" value="$1">Android&seps;&ver;(?:&seps;&androids;)?;&s;+?(&model;?)\)&s;</pattern>
			</define>

            <define name="DeviceModel">
				<pattern type="string" value="iDxD4">iDxD4</pattern>
				<pattern type="string" value="Yummy-Duo">Yummy-Duo</pattern>
				<pattern type="regex" value="$1">^(?:.*(?:[-&s;]))?((?:GT|SGH|SM|SHV)\-[^ /;\)]+?)(?:(?:&s;|\)|;|\-|/).*)?$</pattern>
				<pattern type="regex" value="$1">(Athens15[^ ]*)</pattern>
				<pattern type="regex" value="">;&s;(?:Neo|Supra|Cube|Infnix|Marshall|vivo|cross|htc|colors|Karbonn|OnePlus|fly|doogee|Xiaomi|amaze|Tecno|thl|texet|zte|oppo|nomi|Prestigio|Philips|PIRANHA|sony|SYMPHONY|Rombica|Micromax|dell|ark|asus|homtom|hyundai|loveme|jxd|dns)&seps;&notmodels;[\)\/]</pattern>
				<pattern type="regex" value="$1">POV[\-&s;_]?TV[\-_&s;]?(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">BlackBerry&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">[^M]SIE&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">HTC&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">ZTE&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">ASUS&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Micromax&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">LG[\-_/](&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MOT&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MOT&seps;(&model;?)/</pattern>
				<pattern type="regex" value="$1">Sony&s;?Ericsson&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Palm&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Kindle[ \-_](&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Lenovo(?: Lenovo| 2)?&seps;?(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">HUAWEI[ \-_](&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Samsung&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Coolpad&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Thl&seps;+(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Hewlett-Packard&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Philips&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Fly&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">DEXP&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Nomi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">SUPRA&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Oysters&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Wileyfox&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Casper&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Infinix&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">QMobile&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Tele2&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Beeline&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MTC&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Nokia&seps;?(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Vodafone&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">4Good&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Sony&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">DNS&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">PocketBook&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Elephone&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;UMI&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">WEXLER&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">OPPO&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">TurboPad&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Avea&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">QUMO&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Coolpad&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;Acer&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Panasonic&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Smartfren&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;HP&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Basco&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Alcatel&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">ARCHOS&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">teXet&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Haier&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Senkatel&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Hisense&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MyPhone&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Symphony&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Jinga&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Azumi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Turkcell[ /_](&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Google&seps;(Nexus &model;)&build;</pattern>
				<pattern type="regex" value="$1">Intex&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Karbonn&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Spice&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">;&s;NEO[ _](&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Celkon&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">G\-TiDE&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MITO&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Woxter&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Positivo&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Prestigio&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Hasee&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Explay&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">;&s;CUBE&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Ramos&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Digma&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Masstel&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Changhong&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">iBall&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">XOLO&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">JXD&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Vivo&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Ritmix&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Amazon&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">K\-Touch&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Vestel&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">HYUNDAI&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;Lark&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Doogee&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">AKAI&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Vertex&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Mobiistar&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">OnePlus&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Lovme&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">E\-Boda&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Amaze&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Cloudfone&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Dark&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Highscreen&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Lanix&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Newman&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Motorola&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Colors&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">JIAYU&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Piranha&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Gionee&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">CCIT&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Cubot&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">CKK&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MARSHALL&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">UTime&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Kazam&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Mlais&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Allview&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Android&seps;&ver;;&s;Xiaomi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Lenco&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;Ark&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">HOMTOM&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Megafon&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Keneksi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">ADVAN&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Vexia&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MEEG&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Amoi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">iOcean&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Changjiang&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Malata&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">KPT&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Zopo&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Chuwi&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Maxtron&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Onida&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Infocus&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;MZ&seps;?(?:Meizu)?&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Meizu&seps;?(?:MZ)?&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Tecno&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Axioo&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">&s;Cross&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Evercoss&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">KliTON&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">DELL&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">NVidia&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Wiko&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Konka&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Irbis&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Microsoft;&s;(&model;?)\)</pattern>
				<pattern type="regex" value="$1">Nokia;&s;(&model;?)\)</pattern>
				<pattern type="regex" value="$1">SENSEIT&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">i\-Mobile&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">MEDION&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Q\-Smart&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="$1">Rombica&seps;(&model;?)&build;</pattern>
				<pattern type="regex" value="">;&s;+?&notmodels;&s;+Build</pattern>
				<pattern type="regex" value="$1">;&s;*(&model;)&s;+Build</pattern>
				<pattern type="regex" value="$1">com\.yandex\.mobile.[a-z\.]+/&ver3d;&s;*\([A-Za-z_]+&s;(&model;);</pattern>
				<!--Небольной хак, чтобы исключит матч слов, которые похожи на модели, но ими не являются-->
				<pattern type="regex" value="">Android&seps;&ver;(?:&seps;&androids;)?;&s;+&notmodels;(?:;&s;&notmodels;)?&s;*?\)&s;</pattern>
				<pattern type="regex" value="$1">Android&seps;&ver;(?:&seps;&androids;)?;(?:&s;&notmodels;;)?&s;+?(&model;?)(?:; wv)?\)(?:&s;|AppleWebKit)</pattern>
			</define>
		</branch>
	</branch>

	<branch type="default" name="Desktop">
		<define name="isMobile" value="false"/>
		<define name="isTouch" value="false"/>
		<define name="isBrowser" value="true"/>
		<branch name="Opera">
			<match type="any">
				<pattern type="string">Opera/</pattern>
				<pattern type="string">Opera </pattern>
			</match>
			<define name="BrowserEngine">
				<pattern type="regex" value="WebKit">WebKit/(&ver3d;)</pattern>
				<pattern type="regex" value="Presto">Opera[/&s;]</pattern>
			</define>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Presto/(&ver3d;)</pattern>
				<pattern type="regex" value="$1">WebKit/(&ver3d;)</pattern>
			</define>
			<define name="BrowserName" value="Opera"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">Version/(&ver;)</pattern>
				<pattern type="regex" value="$1">Opera[/&s;](&ver;)</pattern>
			</define>
			<define name="isBeta">
				<pattern type="string" value="true">Edition Next</pattern>
			</define>
		</branch>

		<branch name="Trident">
			<match type="any">
				<pattern type="string">Trident/7</pattern>
				<pattern type="string">Microsoft Office/</pattern>
				<pattern type="regex">MSIE &ver2d;</pattern>
			</match>
			<define name="BrowserEngine" value="Trident"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Trident/(&ver2d;)</pattern>
			</define>
			<define name="BrowserName" value="MSIE"/>
			<define name="BrowserVersion">
				<pattern type="string" value="8.0">Trident/4.0</pattern>
				<pattern type="string" value="11.0">Trident/7.0</pattern>
				<pattern type="string" value="10.0">Trident/6.0</pattern>
				<pattern type="string" value="9.0">Trident/5.0</pattern>
				<pattern type="regex" value="$1">MSIE (&ver2d;)</pattern>
				<pattern type="regex" value="$1">\(IE (&ver2d;)</pattern>
				<pattern type="regex" value="$1">rv[: ](&ver2d;)</pattern>
			</define>

			<branch name="Lunascape">
				<match type="any">
					<pattern type="regex">Lunascape</pattern>
				</match>
				<define name="BrowserName" value="Lunascape"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Lunascape[&s;/](&ver;)</pattern>
				</define>
			</branch>

			<branch name="Maxthon">
				<match type="any">
					<pattern type="string">Maxthon</pattern>
				</match>
				<define name="BrowserShell" value="Maxthon"/>
				<define name="BrowserShellVersion">
					<pattern type="regex" value="$1">Maxthon[/&s;](&ver2d;)</pattern>
				</define>
			</branch>

            <define name="BrowserShell">
				<pattern type="string" value="GreenBrowser">GreenBrowser</pattern>
				<pattern type="string" value="AvantBrowser">Avant Browser</pattern>
				<pattern type="string" value="MyIE2">MyIE2</pattern>
				<pattern type="string" value="MyIE">MyIE</pattern>
				<pattern type="string" value="SlimBrowser">SlimBrowser</pattern>
				<pattern type="string" value="NetCaptor">NetCaptor</pattern>
				<pattern type="string" value="MicrosoftOffice">Microsoft Office</pattern>
			</define>
		</branch>

		<branch name="Gecko">
			<match type="any">
				<pattern type="string">Gecko/</pattern>
				<pattern type="string">) Gecko</pattern>
				<pattern type="string">Firefox/</pattern>
				<pattern type="regex">&s;rv:&ver;;</pattern>
			</match>
			<define name="BrowserEngine" value="Gecko"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">rv:(&ver;)</pattern>
			</define>

			<branch name="Epiphany">
				<match type="any">
					<pattern type="string">Epiphany</pattern>
				</match>
				<define name="BrowserName" value="Epiphany"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Epiphany/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="AvantBrowser">
				<match type="any">
					<pattern type="string">Avant Browser</pattern>
				</match>
				<define name="BrowserName" value="AvantBrowser"/>
			</branch>

			<branch name="Camino">
				<match type="any">
					<pattern type="string">Camino/</pattern>
				</match>
				<define name="BrowserName" value="Camino"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Camino/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Flock">
				<match type="any">
					<pattern type="string">Flock/</pattern>
				</match>
				<define name="BrowserName" value="Flock"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Flock/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Galeon">
				<match type="any">
					<pattern type="string">Galeon/</pattern>
				</match>
				<define name="BrowserName" value="Galeon"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Galeon/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="K-Meleon">
				<match type="any">
					<pattern type="string">K-Meleon/</pattern>
					<pattern type="regex">K-Meleon &ver;</pattern>
				</match>
				<define name="BrowserName" value="K-Meleon"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">K-Meleon[/&s;](&ver;)</pattern>
				</define>
			</branch>

			<branch name="SeaMonkey">
				<match type="any">
					<pattern type="string">SeaMonkey/</pattern>
				</match>
				<define name="BrowserName" value="SeaMonkey"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">SeaMonkey/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="PaleMoon">
				<match type="any">
					<pattern type="string">PaleMoon/</pattern>
				</match>
				<define name="BrowserName" value="PaleMoon"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">PaleMoon/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Waterfox">
				<match type="any">
					<pattern type="string">Waterfox/</pattern>
				</match>
				<define name="BrowserName" value="Waterfox"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Waterfox/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Lunascape">
				<match type="any">
					<pattern type="regex">Lunascape</pattern>
				</match>
				<define name="BrowserName" value="Lunascape"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Lunascape[&s;/](&ver;)</pattern>
				</define>
			</branch>

			<branch name="Netscape">
				<match type="any">
					<pattern type="regex">Netscape[&num;]?/</pattern>
				</match>
				<define name="BrowserName" value="Netscape"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Netscape[&num;]?/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Firefox">
				<match type="any">
					<pattern type="string">Firefox</pattern>
					<pattern type="string">Namoroka/</pattern>
					<pattern type="string">Shiretoko/</pattern>
					<pattern type="string">Iceweasel/</pattern>
					<pattern type="string">Iceape/</pattern>
					<pattern type="string">GranParadiso/</pattern>
					<pattern type="string">Minefield/</pattern>
					<pattern type="string">Thunderbird/</pattern>
					<pattern type="string">Firebird/</pattern>
					<pattern type="string">BonEcho/</pattern>
				</match>
				<define name="BrowserName" value="Firefox"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Firefox/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Namoroka/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Shiretoko/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Iceweasel/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Minefield/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Thunderbird/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Firebird/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">GranParadiso/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">Iceape/(&ver2d;)</pattern>
					<pattern type="regex" value="$1">BonEcho/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Songbird">
				<match type="any">
					<pattern type="regex">Songbird/</pattern>
				</match>
				<define name="BrowserName" value="SongBird"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Songbird/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Conkeror">
				<match type="any">
					<pattern type="regex">Conkeror/</pattern>
				</match>
				<define name="BrowserName" value="Conkeror"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Conkeror/(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="DefaultGecko" type="default">
				<branch name="MozillaSuite">
					<match>
						<pattern type="regex">&s;rv:0\.[6-9]</pattern>
						<pattern type="regex">&s;rv:1\.[0-7]</pattern>
					</match>
					<define name="BrowserName">Mozilla</define>
					<define name="BrowserVersion">
						<pattern type="regex" value="$1">&s;rv:(&ver;)</pattern>
					</define>
				</branch>

                <branch name="FirefoxPre5">
					<match>
						<pattern type="regex">&s;rv:1\.[8-9]</pattern>
						<pattern type="regex">&s;rv:2.</pattern>
					</match>
					<define name="BrowserName">Firefox</define>
					<define name="BrowserVersion">
						<pattern type="regex" value="1.5">rv:1.8.0</pattern>
						<pattern type="regex" value="2.0">rv:1.8</pattern>
						<pattern type="regex" value="3.0">rv:1.9.0</pattern>
						<pattern type="regex" value="3.5">rv:1.9.1</pattern>
						<pattern type="regex" value="3.6">rv:1.9.2</pattern>
						<pattern type="regex" value="3.7">rv:1.9</pattern>
						<pattern type="regex" value="4.0">rv:2.0</pattern>
					</define>
				</branch>

                <branch name="FirefoxPost5">
					<match>
						<pattern type="regex">&s;rv:(?:[5-9]\.|[&num;]{2,}\.)</pattern>
					</match>
					<define name="BrowserName">Firefox</define>
					<define name="BrowserVersion">
						<pattern type="regex" value="$1">&s;rv:(&ver;)</pattern>
					</define>
				</branch>
			</branch>
		</branch>

		<branch name="edge">
			<match>
				<pattern type="string">Edge/</pattern>
			</match>
			<define name="BrowserEngine" value="Edge"/>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">Edge/(&ver;)</pattern>
			</define>
			<define name="BrowserName" value="Edge"/>
			<define name="BrowserVersion">
				<pattern type="regex" value="$1">Edge/(&ver;)</pattern>
			</define>
		</branch>

		<branch name="KHTML">
			<match type="any">
				<pattern type="string">Konqueror</pattern>
			</match>
			<define name="BrowserEngine">
				<pattern type="regex" value="KHTML">KHTML/</pattern>
				<pattern type="regex" value="WebKit">WebKit/</pattern>
				<pattern type="regex" value="KHTML">Konqueror</pattern>
			</define>
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">KHTML/(&ver;)</pattern>
				<pattern type="regex" value="$1">WebKit/?(&ver;)</pattern>
			</define>

			<branch name="Konqueror">
				<match type="any">
					<pattern type="string">Konqueror/</pattern>
				</match>
				<define name="BrowserName" value="Konqueror"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Konqueror/(&ver2d;)</pattern>
				</define>
			</branch>
		</branch>

		<branch name="TextBased">
			<match type="any">
				<pattern type="string">libwww</pattern>
				<pattern type="string">libcurl</pattern>
				<pattern type="string">Python-urllib</pattern>
				<pattern type="string">Wget</pattern>
				<pattern type="regex">^PHP/</pattern>
				<pattern type="regex">^Java/</pattern>
				<pattern type="regex">E?Links</pattern>
			</match>
			<define name="BrowserEngine">
				<pattern type="regex" value="TextBased">E?Links</pattern>
				<pattern type="string" value="TextBased">Lynx</pattern>
			</define>
			<define name="BrowserName">
				<pattern type="string" value="ELinks">ELinks</pattern>
				<pattern type="string" value="Links">Links</pattern>
				<pattern type="string" value="Lynx">Lynx</pattern>
			</define>
			<define name="isBrowser">
				<pattern type="string" value="false">libcurl</pattern>
				<pattern type="string" value="false">Python-urllib</pattern>
				<pattern type="string" value="false">Wget</pattern>
				<pattern type="regex" value="false">^PHP/</pattern>
				<pattern type="regex" value="false">^Java/</pattern>
				<pattern type="string" value="false">libwww-perl</pattern>
			</define>
		</branch>

		<branch name="RobotBrowser">
			<match type="any">
				<pattern type="string">facebookexternalhit/</pattern>
				<pattern type="string">vkShare</pattern>
				<pattern type="string">OdklBot/</pattern>
				<pattern type="string">Twitterbot</pattern>
				<pattern type="string">MailRuConnect</pattern>
				<pattern type="regex">developers\.google\.com/.*/web/snippet</pattern>
			</match>
			<define name="isRobot" value="true"/>
			<define name="isBrowser" value="false"/>
			<define name="BrowserName">
				<pattern type="string" value="facebookexternalhit">facebookexternalhit/</pattern>
				<pattern type="string" value="vkShare">vkShare</pattern>
				<pattern type="string" value="OdklBot">OdklBot/</pattern>
				<pattern type="string" value="Twitterbot">Twitterbot</pattern>
				<pattern type="string" value="MailRuConnect">MailRuConnect</pattern>
				<pattern type="regex" value="GPlusSnippet">developers\.google\.com/.*/web/snippet</pattern>
			</define>
		</branch>

		<branch name="WebKitFamily">
			<match type="any">
				<pattern type="string">WebKit</pattern>
			</match>
			<define name="BrowserEngine" value="WebKit"/>
			<!--Blink ломает практически все-->
			<!--<define name="BrowserEngine">
				<pattern type="regex" value="Blink">Chrome/(?:28|29|[3-9][0-9])</pattern>
			</define>-->
			<define name="BrowserEngineVersion">
				<pattern type="regex" value="$1">WebKit/?(&ver;)</pattern>
			</define>

			<define name="BrowserBase">
				<pattern type="string" value="Chromium">Chromium/</pattern>
				<pattern type="string" value="Chromium">Chrome/</pattern>
			</define>

			<define name="BrowserBaseVersion">
				<pattern type="regex" value="$1">Chromium/(&ver;)</pattern>
				<pattern type="regex" value="$1">Chrome/(&ver;)</pattern>
			</define>

			<branch name="YandexInternet">
				<match type="any">
					<pattern type="string"> YI</pattern>
					<pattern type="string"> YE</pattern>
				</match>
				<define name="BrowserName" value="YandexInternet"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Chrome/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="YandexBrowser">
				<match type="any">
					<pattern type="string"> YandexBrowser/</pattern>
					<pattern type="string"> YaBrowser/</pattern>
				</match>
				<define name="BrowserName" value="YandexBrowser"/>
				<define name="BrowserName">
					<pattern type="regex" value="YandexBrowserLite">\(lite\)</pattern>
				</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">YaBrowser/(&ver;)</pattern>
					<pattern type="regex" value="$1">Chrome/(&ver;)</pattern>
					<pattern type="regex" value="$1">Ya[&word;]*Browser/(&ver;)</pattern>
				</define>
				<define name="YaGUI">
					<pattern type="regex" value="$1">Yowser/(&ver;)</pattern>
				</define>
				<branch name="DesktopMode">
					<match type="any">
						<pattern type="regex">YaBrowser/(?:[&num;]+\.){4}[&num;]{2}</pattern>
					</match>
					<define name="DesktopMode" value="true"/>
					<define name="X-OSFamily">
						<pattern type="regex" value="iOS">YaBrowser/(?:[&num;]+\.){4}1[&num;]</pattern>
						<pattern type="regex" value="Android">YaBrowser/(?:[&num;]+\.){4}0[&num;]</pattern>
					</define>
					<define name="X-DeviceType">
						<pattern type="regex" value="Phone">YaBrowser/(?:[&num;]+\.){4}[&num;]0</pattern>
						<pattern type="regex" value="Tablet">YaBrowser/(?:[&num;]+\.){4}[&num;]1</pattern>
					</define>
				</branch>
				<define name="YaITPExpVersion">
					<pattern type="regex" value="$1">Yptp/1\.([0-9][0-9])</pattern>
				</define>
				<define name="YaBuildName">
					<pattern type="regex" value="$1">YaBrowser/(?:&ver;) \(([&word;]+)\)</pattern>
				</define>
				<define name="isTurboApp">
					<pattern type="regex" value="true"> TA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="TurboAppPlatformVersion">
					<pattern type="regex" value="$1"> TA/(&ver;)</pattern>
				</define>

				<define name="isSuperApp">
					<pattern type="regex" value="true"> SA/[0-9]+\.[0-9]+</pattern>
				</define>
				<define name="SuperAppVersion">
					<pattern type="regex" value="$1"> SA/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Lunascape">
				<match type="any">
					<pattern type="regex">Lunascape</pattern>
				</match>
				<define name="BrowserName" value="Lunascape"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Lunascape[&s;/](&ver;)</pattern>
				</define>
			</branch>

			<branch name="Vivaldi">
				<match type="any">
					<pattern type="string">Vivaldi/</pattern>
				</match>
				<define name="BrowserName" value="Vivaldi"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Vivaldi/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="CocCoc">
				<match type="any">
					<pattern type="string">coc_coc_browser/</pattern>
				</match>
				<define name="BrowserName" value="CocCoc"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">coc_coc_browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Sleipnir">
				<match type="any">
					<pattern type="string">Sleipnir/</pattern>
				</match>
				<define name="BrowserName" value="Sleipnir"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Sleipnir/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Maxthon">
				<match type="any">
					<pattern type="string">Maxthon/</pattern>
				</match>
				<define name="BrowserName" value="Maxthon"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Maxthon/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="ElementsBrowser">
				<match type="any">
					<pattern type="string">Elements Browser/</pattern>
				</match>
				<define name="BrowserName" value="Elements Browser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Elements Browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="UCBrowser">
				<match type="any">
					<pattern type="string">UBrowser/</pattern>
					<pattern type="string">UCBrowser/</pattern>
				</match>
				<define name="BrowserName" value="UCBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">UBrowser/(&ver;)</pattern>
					<pattern type="regex" value="$1">UCBrowser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="HuaweiBrowserDesktopMode">
				<match type="any">
					<pattern type="string">HuaweiBrowser/</pattern>
				</match>
				<define name="BrowserName" value="Huawei Browser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">HuaweiBrowser/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="MZBrowserDesktopMode">
				<match type="any">
					<pattern type="string">MZBrowser/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName" value="MZBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MZBrowser/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="SamsungBrowserDesktopMode">
				<match type="any">
					<pattern type="string">SamsungBrowser/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName" value="Samsung Internet"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">SamsungBrowser/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="MiuiBrowserDesktopMode">
				<match type="any">
					<pattern type="string">MiuiBrowser/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName" value="MIUI"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">MiuiBrowser/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="EuiBrowserDesktopMode">
				<match type="any">
					<pattern type="string">EUI Browser/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName" value="EUI"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">EUI Browser/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="PuffinDesktopMode">
				<match>
					<pattern type="string">Puffin/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName">Puffin</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Puffin/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="ChromeDesktopMode">
				<match>
					<pattern type="string">CriOS/</pattern>
				</match>
				<define name="DesktopMode" value="true"/>
				<define name="BrowserName">ChromeMobile</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">CriOS/(&ver;)</pattern>
				</define>
				<define name="DesktopMode" value="true"/>
			</branch>

			<branch name="RussianChromes">
				<match type="any">
					<pattern type="string">MRCHROME SOC</pattern>
					<pattern type="string">MRCHROME</pattern>
					<pattern type="string">Nichrome/</pattern>
                    <pattern type="string">SputnikBrowser/</pattern>
					<pattern type="string">Atom/</pattern>
				</match>
				<define name="BrowserName">
					<pattern type="string" value="Amigo">MRCHROME SOC</pattern>
					<pattern type="string" value="Mail.ru">MRCHROME</pattern>
					<pattern type="string" value="Nichrome">Nichrome/</pattern>
                    <pattern type="string" value="Sputnik">SputnikBrowser/</pattern>
					<pattern type="string" value="Atom">Atom/</pattern>
				</define>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Atom/(&ver3d;)</pattern>
					<pattern type="regex" value="$1">Chrome/(&ver3d;)</pattern>
                    <pattern type="regex" value="$1">SputnikBrowser/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Iron">
				<match type="any">
					<pattern type="string">Iron/</pattern>
				</match>
				<define name="BrowserName" value="Iron"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Iron/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Edge">
				<match type="any">
					<pattern type="string">Edg/</pattern>
				</match>
				<define name="BrowserName" value="Edge"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Edg/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Opera">
				<match type="any">
					<pattern type="string">OPR/</pattern>
				</match>
				<define name="BrowserName" value="Opera"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">OPR/(&ver;)</pattern>
				</define>
				<define name="isBeta">
					<pattern type="string" value="true">Edition Next</pattern>
					<pattern type="string" value="true">Edition Developer</pattern>
				</define>
			</branch>

			<branch name="HeadlessChrome">
				<match type="any">
					<pattern type="string">HeadlessChrome/</pattern>
				</match>
				<define name="BrowserName" value="HeadlessChrome"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">HeadlessChrome/(&ver;)</pattern>
				</define>
				<define name="isBrowser" value="true"/>
			</branch>

			<branch name="Chromium">
				<match type="any">
					<pattern type="string">Chromium/</pattern>
				</match>
				<define name="BrowserName" value="Chromium"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Chromium/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="Flock">
				<match type="any">
					<pattern type="string">Flock/</pattern>
				</match>
				<define name="BrowserName" value="Flock"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Flock/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Chrome">
				<match type="any">
					<pattern type="string">Chrome/</pattern>
				</match>
				<define name="BrowserName" value="Chrome"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Chrome/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Midori">
				<match type="any">
					<pattern type="string">Midori/</pattern>
				</match>
				<define name="BrowserName" value="Midori"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">^Midori/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Epiphany">
				<match type="any">
					<pattern type="string">Epiphany</pattern>
				</match>
				<define name="BrowserName" value="Epiphany"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Epiphany/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Otter">
				<match type="any">
					<pattern type="string">Otter</pattern>
				</match>
				<define name="BrowserName" value="Otter"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Otter/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="QtWeb">
				<match type="any">
					<pattern type="string">QtWeb</pattern>
				</match>
				<define name="BrowserName" value="QtWeb"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">QtWeb Internet Browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="QupZilla">
				<match type="any">
					<pattern type="string">QupZilla/</pattern>
				</match>
				<define name="BrowserName" value="QupZilla"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">QupZilla/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="Arora">
				<match type="any">
					<pattern type="string">Arora</pattern>
				</match>
				<define name="BrowserName" value="Arora"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Arora/(&ver3d;)</pattern>
				</define>
			</branch>

			<branch name="OmniWeb">
				<match type="any">
					<pattern type="string">OmniWeb/</pattern>
				</match>
				<define name="BrowserName" value="OmniWeb"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">OmniWeb/v(&ver2d;)</pattern>
				</define>
			</branch>

			<branch name="Rekonq">
				<match type="any">
					<pattern type="string">rekonq</pattern>
				</match>
				<define name="BrowserName" value="Rekonq"/>
			</branch>

			<branch name="Uzbl">
				<match type="any">
					<pattern type="string">Uzbl</pattern>
				</match>
				<define name="BrowserName" value="Uzbl"/>
			</branch>

			<branch name="LGBrowser">
				<match type="any">
					<pattern type="string">LG Browser/</pattern>
				</match>
				<define name="BrowserName" value="LGBrowser"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">LG Browser/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="AdobeAIR">
				<match type="any">
					<pattern type="regex">Adobe&s;?AIR</pattern>
				</match>
				<define name="BrowserName" value="AdobeAIR"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Adobe&s;?AIR/(&ver;)</pattern>
				</define>
				<define name="isBrowser" value="false"/>
			</branch>

			<branch name="Playstation">
				<match type="any">
					<pattern type="string">PLAYSTATION</pattern>
				</match>
				<define name="BrowserName" value="Playstation"/>
				<define name="IsMobile">
					<pattern type="string" value="true">Playstation Vita</pattern>
				</define>
				<define name="DeviceVendor" value="Sony"/>
				<define name="DeviceModel">
					<pattern type="string" value="PlayStation Vita">PlayStation Vita</pattern>
					<pattern type="string" value="PlayStation 3">PlayStation 3</pattern>
					<pattern type="string" value="PlayStation 4 Pro">PlayStation 4 Pro</pattern>
					<pattern type="string" value="PlayStation 4">PlayStation 4</pattern>
					<pattern type="string" value="PlayStation 5">PlayStation 5</pattern>
				</define>
			</branch>

			<branch name="Steam">
				<match type="any">
					<pattern type="string">Valve Steam Client</pattern>
				</match>
				<define name="BrowserName" value="Steam"/>
			</branch>

			<branch name="GoogleWirelessTranscoder">
				<match type="any">
					<pattern type="string">Google Wireless Transcoder</pattern>
				</match>
				<define name="BrowserName" value="GoogleWirelessTranscoder"/>
				<define name="isBrowser" value="false"/>
			</branch>

			<branch name="PhantomJS">
				<match type="any">
					<pattern type="string">PhantomJS</pattern>
				</match>
				<define name="BrowserName" value="PhantomJS"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">PhantomJS/(&ver;)</pattern>
				</define>
				<define name="isBrowser" value="false"/>
				<define name="isRobot" value="true"/>
			</branch>

            <!--
			<branch name="FakeSafari">
				<match type="any">
					<pattern type="regex">Version/5.0.5 Safari/(?!533.21.1)</pattern>
				</match>
				<define name="BrowserName" value="Unknown"/>
				<define name="BrowserEngine" value="Unknown"/>
				<define name="BrowserEngineVersion" value="Unknown"/>
				<define name="isRobot" value="true"/>
				<define name="isBrowser" value="false"/>
			</branch>
			-->

			<branch name="Safari">
				<match type="any">
					<pattern type="string">Safari/</pattern>
				</match>
				<define name="BrowserName" value="Safari"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Version/(&ver2d;)</pattern>
				</define>
				<define name="historySupport">
					<pattern type="regex" value="true">Version/(?:5\.[1-9]|[6-9])</pattern>
				</define>

				<branch name="iCab">
					<match type="any">
						<pattern type="string">iCab</pattern>
					</match>
					<define name="BrowserShell" value="iCab"/>
					<define name="BrowserShellVersion">
						<pattern type="regex" value="$1">iCab/(&ver3d;)</pattern>
					</define>
				</branch>
			</branch>
		</branch>

		<branch type="default" name="UnknownEngine">
            <define name="BrowserName" value="Unknown"/>
			<define name="BrowserEngine" value="Unknown"/>
			<define name="isBrowser" value="false"/>

			<branch name="iTunes">
				<match type="any">
					<pattern type="string">iTunes/</pattern>
				</match>
				<define name="BrowserName" value="iTunes"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">iTunes/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="Dillo">
				<match type="any">
					<pattern type="string">Dillo/</pattern>
				</match>
				<define name="BrowserName" value="Dillo"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Dillo/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="NCSAMosaic">
				<match type="any">
					<pattern type="string">NCSA Mosaic/</pattern>
				</match>
				<define name="BrowserName" value="NCSA Mosaic"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">NCSA Mosaic/(&ver2d;)</pattern>
				</define>
			</branch>

            <branch name="NetSurf">
				<match type="any">
					<pattern type="string">NetSurf/</pattern>
				</match>
				<define name="BrowserName" value="NetSurf"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">NetSurf/(&ver2d;)</pattern>
				</define>
				<define name="isBrowser" value="true"/>
			</branch>

            <branch name="UnixNetscape">
				<match type="any">
					<pattern type="regex">Mozilla/4.*X11</pattern>
				</match>
				<define name="BrowserName" value="Netscape"/>
				<define name="BrowserVersion">
					<pattern type="regex" value="$1">Mozilla/(&ver2d;)</pattern>
				</define>
				<define name="isBrowser" value="true"/>
			</branch>

		</branch>

		<branch type="common" name="BrowserToolbars">
			<branch name="YandexBar">
				<match type="any">
					<pattern type="string">YB/</pattern>
				</match>
				<define name="YandexBar" value="true"/>
				<define name="YandexBarVersion">
					<pattern type="regex" value="$1">YB/(&ver;)</pattern>
				</define>
			</branch>

			<branch name="MailRuSputnik">
				<match type="any">
					<pattern type="string">sputnik</pattern>
				</match>
				<define name="MailRuSputnik" value="true"/>
				<define name="MailRuSputnikVersion">
					<pattern type="regex" value="$1.$2">MRSPUTNIK ([&num;]+),&s;+([&num;]+)</pattern>
					<pattern type="regex" value="$1">sputnik (&ver;)</pattern>
				</define>
			</branch>

			<branch name="MailRuAgent">
				<match type="any">
					<pattern type="string">MRA</pattern>
				</match>
				<define name="MailRuAgent" value="true"/>
				<define name="MailRuAgentVersion">
					<pattern type="regex" value="$1">MRA (&ver;)</pattern>
				</define>
			</branch>

			<branch name="GoogleToolBar">
				<match type="any">
					<pattern type="string">GTB</pattern>
					<pattern type="string">GoogleT</pattern>
				</match>
				<define name="GoogleToolBar" value="true"/>
				<define name="GoogleToolBarVersion">
					<pattern type="regex" value="$1">GTB(&ver;)</pattern>
					<pattern type="regex" value="$1">GoogleT(&ver;)</pattern>
				</define>
			</branch>
		</branch>

		<branch type="common" name="DesktopOS">
			<!--
			<branch name="FakeRobotOS">
				<match type="any">
					<pattern type="regex">Version/5.0.5 Safari/(?!533.21.1)</pattern>
				</match>
				<define name="OSFamily" value="Unknown"/>
				<define name="isRobot" value="true"/>
				<define name="isBrowser" value="false"/>
			</branch>
			-->

			<branch name="Windows">
				<match type="any">
					<pattern type="string">Windows</pattern>
					<pattern type="string">Win16</pattern>
					<pattern type="string">WinNT</pattern>
					<pattern type="string">Win9</pattern>
					<pattern type="string">Win32</pattern>
					<pattern type="string">Win64</pattern>
				</match>
				<define name="OSFamily">Windows</define>
				<define name="OSName">
					<pattern type="string" value="Windows 98">Windows 98</pattern>
					<pattern type="string" value="Windows 98">Win98</pattern>
					<pattern type="string" value="Windows 2000">Windows NT 5.0</pattern>
					<pattern type="string" value="Windows 2000">Windows 2000</pattern>
					<pattern type="string" value="Windows XP">Windows NT 5.1</pattern>
					<pattern type="string" value="Windows XP">Windows XP</pattern>
					<pattern type="string" value="Windows Server 2003">Windows NT 5.2</pattern>
					<pattern type="string" value="Windows Vista">Windows NT 6.0</pattern>
					<pattern type="string" value="Windows 7">Windows NT 6.1</pattern>
					<pattern type="string" value="Windows 8">Windows NT 6.2</pattern>
					<pattern type="string" value="Windows 8.1">Windows NT 6.3</pattern>
					<pattern type="string" value="Windows 10">Windows NT 6.4</pattern>
					<pattern type="string" value="Windows 10">Windows NT 10.0</pattern>
					<pattern type="string" value="Windows NT 4.0">Windows NT;</pattern>
					<pattern type="string" value="Windows NT 3.51">WinNT3.51</pattern>
					<pattern type="string" value="Windows NT 4.0">WinNT</pattern>
					<pattern type="string" value="Windows ME">Windows ME</pattern>
					<pattern type="string" value="Windows 95">Windows 95</pattern>
					<pattern type="string" value="Windows 95">Win95</pattern>
					<pattern type="string" value="Windows 3.11">Win16</pattern>
				</define>
				<define name="OSVersion">
					<pattern type="string" value="4.1.1998">Windows 98</pattern>
					<pattern type="string" value="4.1.1998">Win98</pattern>
					<pattern type="regex" value="$1">Windows NT (&ver;)</pattern>
					<pattern type="string" value="5.0.2195">Windows 2000</pattern>
					<pattern type="string" value="5.1.2600">Windows XP</pattern>
					<pattern type="string" value="4.0.1381">Windows NT;</pattern>
					<pattern type="string" value="3.51">WinNT3.51</pattern>
					<pattern type="string" value="4.0.1381">WinNT</pattern>
					<pattern type="string" value="4.90.3000">Windows ME</pattern>
					<pattern type="string" value="4.0.950">Windows 95</pattern>
					<pattern type="string" value="4.0.950">Win95</pattern>
					<pattern type="string" value="3.11">Win16</pattern>
				</define>
				<define name="x64">
					<pattern type="string" value="true">WOW64</pattern>
					<pattern type="string" value="true">Win64</pattern>
					<pattern type="string" value="true">x64</pattern>
				</define>
				<define name="isTouch">
					<pattern type="string" value="true">Tablet PC</pattern>
					<pattern type="string" value="true">Touch</pattern>
				</define>
			</branch>

			<branch name="Unix">
				<match type="any">
					<pattern type="string">OpenBSD</pattern>
					<pattern type="string">NetBSD</pattern>
					<pattern type="string">FreeBSD</pattern>
					<pattern type="string">Linux</pattern>
					<pattern type="string">SunOS</pattern>
					<pattern type="string">QNX</pattern>
					<pattern type="string">UNIX</pattern>
					<pattern type="string">AIX</pattern>
					<pattern type="string">IRIX</pattern>
					<pattern type="string"> CrOS</pattern>
					<pattern type="string">Playstation 4</pattern>
					<pattern type="regex">X11[^0-9]</pattern>
				</match>
				<define name="OSFamily">
					<pattern type="string" value="OpenBSD">OpenBSD</pattern>
					<pattern type="string" value="Linux">Linux</pattern>
					<pattern type="string" value="Linux">Ubuntu</pattern>
					<pattern type="string" value="QNX">QNX</pattern>
					<pattern type="string" value="SunOS">SunOS</pattern>
					<pattern type="string" value="FreeBSD">FreeBSD</pattern>
					<pattern type="string" value="NetBSD">NetBSD</pattern>
					<pattern type="string" value="Orbis">Playstation 4</pattern>
					<pattern type="string" value="UNIX">UNIX</pattern>
					<pattern type="string" value="AIX">AIX</pattern>
					<pattern type="string" value="IRIX">IRIX</pattern>
					<pattern type="string" value="ChromeOS"> CrOS</pattern>
					<pattern type="string" value="HP-UX">HP-UX</pattern>
					<pattern type="string" value="UnknownNix">X11</pattern>
				</define>
				<define name="x64">
					<pattern type="string" value="true">x86_64</pattern>
					<pattern type="string" value="true">amd64</pattern>
				</define>
				<branch name="LinuxDistr">
					<match>
						<pattern type="string">Linux</pattern>
						<pattern type="string">Ubuntu</pattern>
					</match>

                    <branch name="Ubuntu">
						<match>
							<pattern type="string">Ubuntu</pattern>
						</match>
						<define name="OSName">
							<pattern type="string" value="Ubuntu">Ubuntu</pattern>
						</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">Ubuntu/(&ver;)</pattern>
						</define>
					</branch>

                    <branch name="Mint">
						<match>
							<pattern type="string">Mint</pattern>
						</match>
						<define name="OSName">Mint</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">Mint/(&ver;)</pattern>
						</define>
					</branch>

                    <branch name="Fedora">
						<match>
							<pattern type="string">Fedora</pattern>
						</match>
						<define name="OSName">Fedora</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">fc(&ver;)</pattern>
						</define>
					</branch>

                    <branch name="Mandriva">
						<match>
							<pattern type="string">Mandriva</pattern>
						</match>
						<define name="OSName">Mandriva</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">mdv(&ver;)</pattern>
						</define>
					</branch>

                    <branch name="RedHat">
						<match>
							<pattern type="string">Red Hat/</pattern>
						</match>
						<define name="OSName">RedHat</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1.$2">el([&num;]+)_([&num;]+)</pattern>
							<pattern type="regex" value="$1">el([&num;]+)</pattern>
						</define>
					</branch>

                    <branch name="CentOS">
						<match>
							<pattern type="string">CentOS</pattern>
						</match>
						<define name="OSName">CentOS</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">el(&ver;)</pattern>
						</define>
					</branch>

                    <branch name="ASPLinux">
						<match>
							<pattern type="string">ASPLinux</pattern>
						</match>
						<define name="OSName">ASPLinux</define>
						<define name="OSVersion">
							<pattern type="regex" value="$1">ASPLinux/(&ver3d;)</pattern>
						</define>
					</branch>

					<branch name="Orsay">
						<match>
							<pattern type="regex">SMART\-TV; U; Linux/SmartTV\+(?:2014|2013); Maple2012</pattern>
						</match>
						<define name="OSFamily" value="Orsay"/>
						<define name="OSVersion">
							<pattern type="regex" value="2013">SmartTV\+2013</pattern>
							<pattern type="regex" value="2014">SmartTV\+2014</pattern>
						</define>
					</branch>

                    <branch name="OtherDistr" type="default">
						<define name="OSName">
							<pattern type="string" value="Debian">Debian</pattern>
							<pattern type="string" value="SUSE">SUSE</pattern>
							<pattern type="string" value="Gentoo">Gentoo</pattern>
							<pattern type="string" value="ALTLinux">ALTLinux</pattern>
							<pattern type="string" value="SplashTop">Splashtop</pattern>
						</define>
					</branch>
				</branch>
			</branch>
			<branch name="MacOS">
				<match type="any">
					<pattern type="string">Macintosh</pattern>
					<pattern type="string">Mac OS X</pattern>
					<pattern type="string">PPC</pattern>
					<pattern type="string">Darwin</pattern>
					<pattern type="string">Mac_PowerPC</pattern>
				</match>
				<define name="OSFamily">MacOS</define>
				<define name="OSVersion">
					<pattern type="regex" value="$1.$2.$3">Mac OS X ([&num;]+)_([&num;]+)_([&num;]+)</pattern>
					<pattern type="regex" value="$1.$2">Mac OS X ([&num;]+)_([&num;]+)</pattern>
					<pattern type="regex" value="$1">Mac OS X (&ver;)</pattern>
				</define>
				<define name="OSName">
					<pattern type="regex" value="Mac OS X Tiger">[^_\.]10[_\.]4</pattern>
					<pattern type="regex" value="Mac OS X Leopard">[^_\.]10[_\.]5</pattern>
					<pattern type="regex" value="Mac OS X Snow Leopard">[^_\.]10[_\.]6</pattern>
					<pattern type="regex" value="Mac OS X Lion">[^_\.]10[_\.]7</pattern>
					<pattern type="regex" value="Mac OS X Mountain Lion">[^_\.]10[_\.]8</pattern>
					<pattern type="regex" value="Mac OS X Mavericks">[^_\.]10[_\.]9</pattern>
					<pattern type="regex" value="Mac OS X Yosemite">[^_\.]10[_\.]10</pattern>
                    <pattern type="regex" value="Mac OS X El Capitan">[^_\.]10[_\.]11</pattern>
					<pattern type="regex" value="Mac OS X Sierra">[^_\.]10[_\.]12</pattern>
					<pattern type="regex" value="Mac OS X High Sierra">[^_\.]10[_\.]13</pattern>
					<pattern type="regex" value="Mac OS X Mojave">[^_\.]10[_\.]14</pattern>
					<pattern type="regex" value="macOS Catalina">[^_\.]10[_\.]15</pattern>
					<pattern type="regex" value="macOS Big Sur">[^_\.]11[_\.]0</pattern>
				</define>
			</branch>

			<branch name="OS2">
				<match>
					<pattern type="string">OS/2</pattern>
				</match>
				<define name="OSFamily" value="OS/2"/>
			</branch>

			<branch type="default" name="UnknownOS">
				<define name="OSFamily" value="Unknown"/>
			</branch>
		</branch>
	</branch>

	<branch type="common" name="TV">
		<branch name="isTV">
            <match type="any">
				<pattern type="regex">Google&seps;?TV</pattern>
			    <pattern type="regex">Android&seps;?TV</pattern>
			    <pattern type="regex">Star&seps;?TV</pattern>
				<pattern type="regex">SMART&seps;?TV</pattern>
				<pattern type="regex">Spark&seps;?TV</pattern>
				<pattern type="regex">POV&seps;?TV</pattern>
				<pattern type="regex">TV&seps;?Box</pattern>
				<pattern type="regex">GTV&ver;</pattern>
				<pattern type="regex">Sony&seps;?DTV</pattern>
				<pattern type="regex">X[34]\-[4-9][0-9]</pattern>
				<pattern type="string">Maple2012</pattern>
			    <pattern type="string">LG NetCast</pattern>
			    <pattern type="string">SmartTV</pattern>
			    <pattern type="string">HbbTV/</pattern>
			    <pattern type="string">NETTV/</pattern>
			    <pattern type="string">PHILIPSTV/</pattern>
			    <pattern type="string">Opera TV</pattern>
			    <pattern type="string">AQUOSBrowser</pattern>
			    <pattern type="string">IPTV</pattern>
			    <pattern type="string">LG Browser</pattern>
				<pattern type="string">AppleTV</pattern>
				<pattern type="string">CrKey</pattern>
				<pattern type="string">iconBIT</pattern>
				<pattern type="string">KIWIBOX</pattern>
                <pattern type="regex">com\.yandex\.tv\.[a-z\.]+/&ver4d;</pattern>
            </match>
            <define name="isTV" value="true"/>
            <define name="isMobile" value="false"/>
			<define name="isTouch" value="false"/>
            <define name="isTablet" value="false"/>

            <define name="DeviceVendor">
                <pattern type="regex" value="SAMSUNG">(?:SMART\-TV;&seps;X11;|Tizen)</pattern>
				<pattern type="regex" value="SAMSUNG">SMART\-TV; U; Linux/SmartTV\+(?:2014|2013); Maple2012</pattern>
                <pattern type="regex" value="LG Electronics">NetCast</pattern>
				<pattern type="regex" value="Sony">(?:Bravia|Sony)</pattern>
				<pattern type="regex" value="Philips">Philips</pattern>
				<pattern type="regex" value="Sharp">Sharp</pattern>
            </define>

            <define name="BrowserName">
                <pattern type="string" value="SmartTvHomeApp">com.yandex.tv.home</pattern>
                <pattern type="string" value="SmartTvInputService">com.yandex.tv.input.efir</pattern>
                <pattern type="string" value="SmartTvVideoPlayer">com.yandex.tv.videoplayer</pattern>
            </define>

            <define name="BrowserVersion">
                <pattern type="regex" value="$1">com\.yandex\.tv\.[a-z\.]+/(&ver4d;)</pattern>
            </define>

        </branch>
	</branch>

    <branch type="common" name="Misc">
		<branch name="isRobot">
            <match type="any">
			    <pattern type="string">baiduspider</pattern>
			    <pattern type="string">bingbot</pattern>
			    <pattern type="string">googlebot</pattern>
			    <pattern type="string">google web preview</pattern>
			    <pattern type="string">mediapartners-google</pattern>
			    <pattern type="string">msnbot</pattern>
			    <pattern type="string">yahoo! slurp</pattern>
			    <pattern type="string">+http://yandex.com/bots</pattern>
			    <pattern type="string">YandexBot</pattern>
			    <pattern type="string">Feedfetcher-Google;</pattern>
			    <pattern type="string">WebAlta</pattern>
			    <pattern type="string">StackRambler</pattern>
			    <pattern type="string">Aport</pattern>
			    <pattern type="string">Mail.Ru/</pattern>
			    <pattern type="string">Yandex/</pattern>
			    <pattern type="string">Statbox/</pattern>
			    <pattern type="string">YandexSomething/</pattern>
			    <pattern type="string">YandexBlog/</pattern>
			    <pattern type="string">Yandex.Server/</pattern>
			    <pattern type="string">YaDirectBot</pattern>
			    <pattern type="string">Jakarta Commons-HttpClient/</pattern>
			    <pattern type="string">TurtleScanner</pattern>
			    <pattern type="string">Novoteka</pattern>
			    <pattern type="string">ia_archiver</pattern>
			    <pattern type="string">heritrix</pattern>
			    <pattern type="string">Twiceler-</pattern>
			    <pattern type="string">psbot/</pattern>
			    <pattern type="string">Alchemy Eye Agent</pattern>
			    <pattern type="string">Echoping/</pattern>
			    <pattern type="string">Friends/</pattern>
			    <pattern type="string">WhatsUp</pattern>
			    <pattern type="string">; HttpSatPinger)</pattern>
			    <pattern type="string">MSRBOT (http://research.microsoft.com/research/sv/msrbot/</pattern>
			    <pattern type="string">MJ12bot/</pattern>
			    <pattern type="string">ichiro/</pattern>
			    <pattern type="string">TECOMAC-Crawler/</pattern>
			    <pattern type="string">Gigabot</pattern>
			    <pattern type="string">Sogou Push Spider</pattern>
			    <pattern type="string">check_http/</pattern>
			    <pattern type="string">http_ping</pattern>
			    <pattern type="string">KeepAliveClient</pattern>
			    <pattern type="string">SamSunf</pattern>
			    <pattern type="string">GenHash</pattern>
			    <pattern type="string">IRLbot</pattern>
			    <pattern type="string">UptimeInspector</pattern>
			    <pattern type="string">liveinternet spider</pattern>
			    <pattern type="string">Begun Robot Crawler</pattern>
			    <pattern type="string">InternetSeer.com</pattern>
			    <pattern type="string">Refer.Ru Favicon Bot</pattern>
			    <pattern type="string">Robot Semonitor</pattern>
			    <pattern type="string">Robot PagePromoter</pattern>
			    <pattern type="string">SESpider</pattern>
			    <pattern type="string">Jakarta Commons-HttpClient</pattern>
			    <pattern type="string">Parasite Eliminator</pattern>
			    <pattern type="string">Spinn3r</pattern>
			    <pattern type="string">YandexImages/</pattern>
			    <pattern type="string">YandexVideo/</pattern>
			    <pattern type="string">YandexMedia/</pattern>
			    <pattern type="string">YandexBlogs/</pattern>
			    <pattern type="string">YandexFavicons/</pattern>
			    <pattern type="string">YandexAddurl/</pattern>
			    <pattern type="string">YandexImageResizer/</pattern>
			    <pattern type="string">YandexDirect/</pattern>
			    <pattern type="string">YandexMetrika/</pattern>
			    <pattern type="string">YandexNews/</pattern>
			    <pattern type="string">YandexCatalog/</pattern>
			    <pattern type="string">YandexWebmaster/</pattern>
			    <pattern type="string">AdsBot-Google</pattern>
				<pattern type="string">BingPreview/</pattern>
				<pattern type="string">facebookexternalhit/</pattern>
				<pattern type="string">vkShare</pattern>
				<pattern type="string">OdklBot/</pattern>
				<pattern type="string">Twitterbot</pattern>
				<pattern type="string">MailRuConnect</pattern>
				<pattern type="string">RamblerDmpBot</pattern>
				<pattern type="string">RamblerDsp</pattern>
				<pattern type="string">DuckDuckBot</pattern>
				<pattern type="string">Google Page Speed Insights</pattern>
				<pattern type="string">Chrome-Lighthouse</pattern>
				<pattern type="string">AspiegelBot</pattern>
				<pattern type="string">PetalBot</pattern>
				<pattern type="regex">developers\.google\.com/.*/web/snippet</pattern>
		    </match>

			<define name="isBrowser" value="false"/>
            <define name="isRobot" value="true"/>

        </branch>
	</branch>
</rules>
